@using Runner.Business.Datas.Object
@using Runner.Business.Datas.Model
@inject NotificationService notification

<table class="table is-bordered is-striped is-narrow is-hoverable is-fullwidth">
    <thead>
        <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Required</th>
            <th>Value</th>
            <th class="w50px"></th>
        </tr>
    </thead>
    <tbody>
        @if (Value is not null)
        @foreach (var prop in Value.Properties)
        {
            <tr>
                <td>
                    <p class="control has-icons-left">
                        <input class="input" @bind=prop.Name type="text" placeholder="Name" readonly="@(!prop.AllowModify)">
                        <span class="icon is-small is-left">
                            <i class="fa-solid fa-key"></i>
                        </span>
                    </p>
                </td>
                <td>
                    @if (prop.AllowModify)
                    {
                        <div class="control has-icons-left is-expanded">
                            <div class="select is-fullwidth">
                                <EnumSelect TEnum=DataTypeEnum @bind-Value=prop.Type ValueAfterChanged=@(() => OnTypeSelect_ValueAfterChanged(prop)) />
                            </div>
                            <div class="icon is-small is-left">
                                <i class="fa-solid fa-superscript"></i>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="control has-icons-left">
                            <input class="input" value=@prop.Type type="text" readonly>
                            <span class="icon is-small is-left">
                                <i class="fa-solid fa-superscript"></i>
                            </span>
                        </div>
                    }
                </td>
                <td class="has-text-centered is-vcentered">
                    <input type="checkbox" class="scale2" @bind=prop.IsRequired disabled="@(!prop.AllowModify)">
                </td>
                <td>
                    <DataValueSelector Type=prop.Type @bind-Value=prop.Value ValueAfterChanged=@(()=> OnDataSelect_ValueAfterChanged(prop)) />
                </td>
                <td class="has-text-centered">
                    @if (prop.AllowModify)
                    {
                        <button class="button is-danger" @onclick=@(() => OnRemove_Click(prop))>
                            <span class="icon is-small">
                                <i class="fas fa-times"></i>
                            </span>
                        </button>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>
<button type="button" class="button is-success" @onclick="OnCreate_Click">
    <span class="icon is-small">
        <i class="fa-solid fa-circle-plus"></i>
    </span>
    <span>Add</span>
</button>

@code {

    [Parameter]
    public DataObject? Value { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Value is not null)
            {
                await Value.Resolve(false);
            }
        }
        catch (Exception err)
        {
            await notification.AddError(err);
        }
    }

    private async Task OnCreate_Click()
    {
        if (Value is null)
        {
            return;
        }

        try
        {
            Value.Properties.Add(new DataHandlerItem
            {
                Name = "NewProperty",
                Type = DataTypeEnum.String
            });
        }
        catch (Exception err)
        {
            await notification.AddError(err);
        }
    }

    private async Task OnRemove_Click(DataHandlerItem prop)
    {
        if (Value is null)
        {
            return;
        }

        try
        {
            if (Value.Properties.Contains(prop))
            {
                Value.Properties.Remove(prop);
            }
        }
        catch (Exception err)
        {
            await notification.AddError(err);
        }
    }

    private void OnTypeSelect_ValueAfterChanged(DataProperty prop)
    {
        prop.Value = null;
    }

    private async Task OnDataSelect_ValueAfterChanged(DataProperty prop)
    {
        switch (prop.Type)
        {
            case DataTypeEnum.Inherit:
                {
                    if (Value is not null)
                    {
                        await Value.Resolve(false);
                    }
                    break;
                }
        }
    }
}
