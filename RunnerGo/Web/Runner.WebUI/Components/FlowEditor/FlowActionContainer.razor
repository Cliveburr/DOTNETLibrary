@using Runner.Business.Datas.Model
@using Runner.Business.Entities.Nodes.Types
@using Runner.Business.Datas.Control
@inherits FlowActionView
@inject ClipboardInterop clipboardInterop
@inject NotificationService notificationService

<div class="flowactioncontainer" @onclick=OnOpenEditor @onclick:stopPropagation=true>
    <div class="flowlabel">
        <p>@ValidLabel()</p>
    </div>
    @if (Node.Childs is not null)
    {
        <div class="flowchilds">
            @foreach (var action in Node.Childs)
            {
                <FlowActionSelector Node=action Parent=this UpdateParent=UpdateState />
            }
        </div>
    }
</div>

@code {

    protected override void OnInitialized()
    {
        Node.Data = new DataMerge()
            .ApplyDataTypeProperty(Business.Actions.DataOfTypes.ContainerDataType.Get())
            .ApplyDataProperty(Node.Data)
            .ToDataProperty();
    }

    public override void RemoveChild(FlowAction node)
    {
        if (Node.Childs is not null)
        {
            Node.Childs.Remove(node);
            StateHasChanged();
        }
    }

    public override void MoveUp(FlowAction node)
    {
        if (Node.Childs is not null)
        {
            var index = Node.Childs.IndexOf(node);
            if (index > 0)
            {
                Node.Childs.Remove(node);
                Node.Childs.Insert(index - 1, node);
                StateHasChanged();
            }
        }
    }

    public override void MoveDown(FlowAction node)
    {
        if (Node.Childs is not null)
        {
            var index = Node.Childs.IndexOf(node);
            if (index < Node.Childs.Count - 1)
            {
                Node.Childs.Remove(node);
                Node.Childs.Insert(index + 1, node);
                StateHasChanged();
            }
        }
    }

    private void OnAdd_Click()
    {
        if (Node.Childs is null)
        {
            Node.Childs = new List<FlowAction>();
        }
        Node.Childs.Add(new FlowAction
        {
            Label = "New Action",
            Type = Business.Actions.ActionType.Script
        });
        ClosePanel();
        StateHasChanged();
    }

    private void OnRemove_Click()
    {
        if (Parent is not null)
        {
            ClosePanel();
            Parent.RemoveChild(Node);
        }
    }

    private void OnParallel_Click()
    {
        Node.Type = Business.Actions.ActionType.Parallel;
        ClosePanel();
        UpdateParent();
    }

    private void OnMoveUp_Click()
    {
        if (Parent is not null)
        {
            ClosePanel();
            Parent.MoveUp(Node);
        }
    }

    private void OnMoveDown_Click()
    {
        if (Parent is not null)
        {
            ClosePanel();
            Parent.MoveDown(Node);
        }
    }

    private Task OnCopy_Click()
    {
        var text = System.Text.Json.JsonSerializer.Serialize(Node);
        return clipboardInterop.WriteTextAsync(text);
    }

    private Task OnCut_Click()
    {
        var text = System.Text.Json.JsonSerializer.Serialize(Node);
        OnRemove_Click();
        return clipboardInterop.WriteTextAsync(text);
    }

    private async Task OnPaste_Click()
    {
        var text = await clipboardInterop.ReadTextAsync();
        try
        {
            var node = System.Text.Json.JsonSerializer.Deserialize<FlowAction>(text);
            AdjustValueKind(node);
            if (Node.Childs is null)
            {
                Node.Childs = new List<FlowAction>();
            }
            if (node is not null)
            {
                Node.Childs.Add(node);
            }
        }
        catch
        {
            await notificationService.AddInfo("Invalid clipboard text!");
        }
    }

    private async Task OnEditData_Click()
    {
        ClosePanel();

        var datas = new DataMerge()
            .ApplyDataTypeProperty(Business.Actions.DataOfTypes.ContainerDataType.Get())
            .ApplyDataProperty(Node.Data)
            .ToDataFullProperty();

        var editedData = await Modal.DataFullEditor(datas);
        if (editedData is not null)
        {
            Node.Data = editedData;
            OnOpenEditor();
        }
    }

    protected override RenderFragment EditorForm()
    {
        return
        @<div class="is-flex is-flex-direction-column m-4">
            <h3 class="title is-3">Container</h3>
            <div class="buttons">
                <button type="button" class="button is-info is-small" @onclick="OnMoveUp_Click">
                    <span class="icon is-small">
                        <i class="fa-solid fa-arrow-turn-up"></i>
                    </span>
                </button>
                <button type="button" class="button is-info is-small" @onclick="OnMoveDown_Click">
                    <span class="icon is-small">
                        <i class="fa-solid fa-arrow-turn-down"></i>
                    </span>
                </button>
                <button type="button" class="button is-link is-small" @onclick="OnCopy_Click">
                    <span class="icon is-small">
                        <i class="fa-solid fa-clipboard"></i>
                    </span>
                    <span>Copy</span>
                </button>
                <button type="button" class="button is-danger is-small" @onclick="OnCut_Click">
                    <span class="icon is-small">
                        <i class="fa-solid fa-scissors"></i>
                    </span>
                    <span>Cut</span>
                </button>
                <button type="button" class="button is-warning is-small" @onclick="OnPaste_Click">
                    <span class="icon is-small">
                        <i class="fa-solid fa-paste"></i>
                    </span>
                    <span>Paste</span>
                </button>
            </div>
            <div class="buttons">
                <button type="button" class="button is-primary is-small" @onclick="OnAdd_Click">
                    <span class="icon is-small">
                        <i class="fa-solid fa-circle-plus"></i>
                    </span>
                    <span>Add</span>
                </button>
                @if (Parent != null)
                {
                    <button type="button" class="button is-danger is-small" @onclick="OnRemove_Click">
                        <span class="icon is-small">
                        <i class="fa-solid fa-xmark"></i>
                        </span>
                        <span>Remove</span>
                    </button>
                }
                <button type="button" class="button is-primary is-small" @onclick="OnParallel_Click">
                    <span class="icon is-small">
                        <i class="fa-solid fa-align-justify fa-rotate-90"></i>
                    </span>
                    <span>Parallel</span>
                </button>
            </div>
            <div class="buttons">
                <button type="button" class="button is-primary is-small" @onclick="OnEditData_Click">
                    <span class="icon is-small">
                        <NodeTypeIcon Type=NodeType.Data />
                    </span>
                    <span>Edita Data</span>
                </button>
            </div>
            <div class="field">
                <label class="label">Label</label>
                <div class="control">
                    <input class="input" type="text" @bind=Node.Label placeholder="Label">
                </div>
            </div>
            @if (Node.Data is not null)
            @foreach (var data in Node.Data)
            {
                <div class="field">
                    <label class="label">@data.Name</label>
                    <div class="control">
                        <DataTypeSelector Type=@data.Type @bind-Value=@data.Value />
                    </div>
                </div>
            }
        </div>;
    }
}