@using Runner.Business.Datas.Control
@using Runner.Business.Datas.Model
@using Runner.Business.Entities.Nodes.Types
@inherits BasePage
@implements IFlowActionView
@inject ClipboardInterop clipboardInterop
@inject ScriptService scriptService

<div class="flowaction" @onclick=OnOpenEditor @onclick:stopPropagation=true @onmouseover:stopPropagation=true>
    <p>@ValidLabel()</p>
</div>

@code {

    [Parameter]
    public required FlowAction Node { get; set; }

    [Parameter]
    public required IFlowActionView? Parent { get; set; }

    [Parameter]
    public required Action UpdateParent { get; set; }

    [CascadingParameter(Name = "GetPanel")]
    public Func<RightPanel?>? GetPanel { get; set; }

    protected override void OnInitialized()
    {
        Node.Data = new DataMerge()
            .ApplyDataTypeProperty(Business.Actions.DataOfTypes.ScriptDataType.Get())
            .ApplyDataProperty(Node.Data)
            .ToDataProperty();
    }

    private string ValidLabel()
    {
        return string.IsNullOrEmpty(Node.Label) ?
            " " :
            Node.Label;
    }

    private void OnOpenEditor()
    {
        if (GetPanel != null)
        {
            var panel = GetPanel();
            if (panel != null)
            {
                panel.SetOpen(EditorForm());
            }
        }
    }

    private void ClosePanel()
    {
        if (GetPanel != null)
        {
            var panel = GetPanel();
            if (panel != null)
            {
                panel.CleanPanel();
            }
        }
    }

    public void RemoveChild(FlowAction node)
    {
    }

    public void UpdateState()
    {
        StateHasChanged();
    }

    public void MoveUp(FlowAction node)
    {
    }

    public void MoveDown(FlowAction node)
    {
    }

    private void OnRemove_Click()
    {
        if (Parent is not null)
        {
            ClosePanel();
            Parent.RemoveChild(Node);
        }
    }

    private void OnContainer_Click()
    {
        Node.Type = Business.Actions.ActionType.Container;
        ClosePanel();
        UpdateParent();
    }

    private void OnParallel_Click()
    {
        Node.Type = Business.Actions.ActionType.Parallel;
        ClosePanel();
        UpdateParent();
    }

    private void OnMoveUp_Click()
    {
        if (Parent is not null)
        {
            ClosePanel();
            Parent.MoveUp(Node);
        }
    }

    private void OnMoveDown_Click()
    {
        if (Parent is not null)
        {
            ClosePanel();
            Parent.MoveDown(Node);
        }
    }

    private Task OnCopy_Click()
    {
        var text = System.Text.Json.JsonSerializer.Serialize(Node);
        return clipboardInterop.WriteTextAsync(text);
    }

    private Task OnCut_Click()
    {
        var text = System.Text.Json.JsonSerializer.Serialize(Node);
        OnRemove_Click();
        return clipboardInterop.WriteTextAsync(text);
    }

    private async Task OnEditData_Click()
    {
        var datas = new DataMerge()
            .ApplyDataTypeProperty(Business.Actions.DataOfTypes.ScriptDataType.Get())
            .ApplyDataProperty(Node.Data)
            .ToDataFullProperty();

        var scriptPathProperty = datas
            .First(d => d.Name == "ScriptPath");
        scriptPathProperty.Hidden = true;

        var editedData = await Modal.DataFullEditor(datas);
        if (editedData is not null)
        {
            Node.Data = editedData;
            OnOpenEditor();
        }
    }

    private async void OnScriptPath_Changed(object? value)
    {
        var scriptPath = value as string;
        var scriptPathProperty = Node.Data!
            .First(d => d.Name == "ScriptPath");
        scriptPathProperty.Value = scriptPath;

        if (!string.IsNullOrEmpty(scriptPath))
        {
            var sts = await scriptService.ReadVersionByScriptPath(scriptPath);
            if (sts is null)
            {
                await Notification.AddInfo("ScriptPath invalid!");
            }
            else
            {
                Node.Data = new DataMerge()
                    .ApplyDataTypeProperty(Business.Actions.DataOfTypes.ScriptDataType.Get())
                    .ApplyDataTypeProperty(sts.Value.ScriptVersion.InputTypes)
                    .ApplyDataProperty(Node.Data)
                    .ToDataProperty();
            }
        }
    }

    private RenderFragment EditorForm()
    {
        return
        @<div class="is-flex is-flex-direction-column m-4">
            <h3 class="title is-3">Script</h3>
            <div class="buttons">
                <button type="button" class="button is-info is-small" @onclick="OnMoveUp_Click">
                    <span class="icon is-small">
                        <i class="fa-solid fa-arrow-turn-up"></i>
                    </span>
                </button>
                <button type="button" class="button is-info is-small" @onclick="OnMoveDown_Click">
                    <span class="icon is-small">
                        <i class="fa-solid fa-arrow-turn-down"></i>
                    </span>
                </button>
                <button type="button" class="button is-link is-small" @onclick="OnCopy_Click">
                    <span class="icon is-small">
                        <i class="fa-solid fa-clipboard"></i>
                    </span>
                    <span>Copy</span>
                </button>
                <button type="button" class="button is-danger is-small" @onclick="OnCut_Click">
                    <span class="icon is-small">
                        <i class="fa-solid fa-scissors"></i>
                    </span>
                    <span>Cut</span>
                </button>
            </div>
            <div class="buttons">
                <button type="button" class="button is-primary is-small" @onclick="OnContainer_Click">
                    <span class="icon is-small">
                        <i class="fa-solid fa-box"></i>
                    </span>
                    <span>Container</span>
                </button>
                <button type="button" class="button is-primary is-small" @onclick="OnParallel_Click">
                    <span class="icon is-small">
                        <i class="fa-solid fa-align-justify fa-rotate-90"></i>
                    </span>
                    <span>Parallel</span>
                </button>
                @if (Parent is not null)
                {
                    <button type="button" class="button is-danger is-small" @onclick="OnRemove_Click">
                        <span class="icon is-small">
                            <i class="fa-solid fa-xmark"></i>
                        </span>
                        <span>Remove</span>
                    </button>
                }
            </div>
            <div class="buttons">
                <button type="button" class="button is-primary is-small" @onclick="OnEditData_Click">
                    <span class="icon is-small">
                        <NodeTypeIcon Type=NodeType.Data />
                    </span>
                    <span>Edita Data</span>
                </button>
            </div>
            <div class="field">
                <label class="label">Label</label>
                <div class="control">
                    <input class="input" type="text" @bind=Node.Label placeholder="Label">
                </div>
            </div>
            @if (Node.Data is not null)
            @foreach (var data in Node.Data)
            {
                @if (data.Name == "ScriptPath")
                {
                    <div class="field">
                        <label class="label">@data.Name</label>
                        <div class="control">
                            <NodePathDataType Value=@data.Value ValueChanged=OnScriptPath_Changed />
                        </div>
                    </div>
                }
                else
                {
                    <div class="field">
                        <label class="label">@data.Name</label>
                        <div class="control">
                            <DataTypeSelector Type=@data.Type @bind-Value=@data.Value />
                        </div>
                    </div>
                }
            }
        </div>;
    }
}
