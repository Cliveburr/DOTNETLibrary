@typeparam TEnum where TEnum : struct, Enum;

<select @bind=selected>
    @if (_items != null)
    @foreach (var item in _items)
    {
        if (item == selected)
        {
            <option selected value="@item">@item</option>
        }
        else
        {
            <option value="@item">@item</option>
        }
    }
</select>

@code {

    [Parameter]
    public TEnum Value { get; set; }

    [Parameter]
    public EventCallback<TEnum> ValueChanged { get; set; }

    [Parameter]
    public EventCallback<TEnum> ValueAfterChanged { get; set; }

    [Parameter]
    public TEnum[]? BlackList { get; set; }

    private string selected
    {
        get
        {
            return Value.ToString();
        }
        set
        {
            if (Enum.TryParse<TEnum>(value, false, out TEnum result))
            {
                if (!Value.Equals(result))
                {
                    Value = result;
                    ValueChanged.InvokeAsync(Value);
                    ValueAfterChanged.InvokeAsync(Value);
                }
            }
        }
    }

    private List<string>? _items;

    protected override void OnInitialized()
    {
        _items = Enum.GetValues<TEnum>()
            .Where(t =>
            {
                if (BlackList is not null && BlackList.Contains(t))
                {
                    return false;
                }

                return true;
            })
            .Select(t => t.ToString())
            .ToList();
    }
}
