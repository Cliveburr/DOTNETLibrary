

<div class="tagsfield field is-grouped is-grouped-multiline input">
    @foreach (var tag in _tags)
    {
        <div class="control">
            <div class="tags has-addons">
                <span class="tag">@tag</span>
                @if (!Readonly)
                {
                    <a class="tag is-delete" @onclick=@(() => Remove(tag))></a>
                }
            </div>
        </div>
    }
    @if (!Readonly)
    {
        <input type="text" placeholder="Add tag" @bind-value=inputValue @onkeyup=Input_OnKeyUp @onkeyup:preventDefault="inputPreventDefault">
    }
    else
    {
        <div class="fakeInput"></div>
    }
</div>

@code {

    [Parameter]
    public int MinLength { get; set; } = 3;

    [Parameter]
    public int MaxLength { get; set; } = 30;

    [Parameter]
    public string? FormatValidation { get; set; }

    [Parameter]
    public object? Value { get; set; }

    [Parameter]
    public EventCallback<object?> ValueChanged { get; set; }

    [Parameter]
    public bool Readonly { get; set; }

    private List<string> _tags = new List<string>();
    private bool inputPreventDefault;
    private string inputValue = "";

    protected override void OnInitialized()
    {
        var tags = Value as List<string>;
        if (tags is not null)
        {
            _tags = tags;
        }
    }

    private bool ValidateTag(string tag)
    {
        if (_tags.IndexOf(tag) != -1 || tag.Length < MinLength || tag.Length > MaxLength)
        {
            return false;
        }
        if (!string.IsNullOrEmpty(FormatValidation))
        {
            var tagFormat = new System.Text.RegularExpressions.Regex(FormatValidation);
            if (!tagFormat.IsMatch(tag))
            {
                return false;
            }
        }
        return true;
    }

    private void Input_OnKeyUp(KeyboardEventArgs keyboardEventArgs)
    {
        if (keyboardEventArgs.Key == "Enter")
        {
            inputPreventDefault = true;

            var newTags = inputValue.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
                .Where(t => ValidateTag(t));
            if (newTags.Any())
            {
                _tags.AddRange(newTags);
                inputValue = "";
                ValueChanged.InvokeAsync(_tags);
                StateHasChanged();
            }
        }
        else
        {
            inputPreventDefault = false;
        }
    }

    private void Remove(string tag)
    {
        _tags.Remove(tag);
    }
}
