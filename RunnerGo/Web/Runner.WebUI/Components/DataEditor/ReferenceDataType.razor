@* @using Runner.Business.Datas.Model.ReferenceValues;
@inject ModalService modalService;

@if (Readonly)
{
    <div class="field">
        @if (!string.IsNullOrEmpty(Label))
        {
            <label class="label">@Label</label>
        }
        <div class="control has-icons-left">
            <input class="input" @bind=innerValue type="text" readonly>
            <span class="icon is-left">
                <i class="fa-solid fa-suitcase"></i>
            </span>
        </div>
    </div>
}
else
{
    <div class="field">
        @if (!string.IsNullOrEmpty(Label))
        {
            <label class="label">@Label</label>
        }
        <p class="control">
            <div class="field has-addons">
                <div class="control has-icons-left is-expanded">
                    <input class="input" @bind=innerValue type="text" readonly>
                    <span class="icon is-left">
                        <NodeTypeIcon Type=@((dataType is null) ? NodeType.Data : NodeType.DataType) />
                    </span>
                </div>
                <div class="control">
                    <button class="button is-info" @onclick=OnSelect_Click>
                        <span>Select</span>
                    </button>
                </div>
            </div>
        </p>
    </div>
}

@code {

    [Parameter]
    public object? Value { get; set; }

    [Parameter]
    public EventCallback<object?> ValueChanged { get; set; }

    [Parameter]
    public bool Readonly { get; set; }

    [Parameter]
    public string? Label { get; set; }

    private DataTypeReferenceValue? dataType;
    private DataReferenceValue? data;
    private string innerValue = "";

    protected override void OnInitialized()
    {
        dataType = Value as DataTypeReferenceValue;
        if (dataType is not null)
        {
            innerValue = dataType.DataTypePath;
            return;
        }
        data = Value as DataReferenceValue;
        if (data is not null)
        {
            innerValue = data.DataPath;
            return;
        }
        throw new Exception("Invalida ReferenceDataType editor Value!");
    }

    private async Task OnSelect_Click()
    {
        if (dataType is not null)
        {
            var response = await modalService.SelectNode(new Modal.SelectNode.SelectNodeRequest
            {
                Title = "Select Data Type",
                Value = "",
                PlaceHolder = "Enter the data type path",
                AllowedTypes = [NodeType.DataType]
            });
            if (response is not null && !response.NodePath.Equals(dataType.DataTypePath))
            {
                dataType.DataTypePath = response.NodePath;
                innerValue = dataType.DataTypePath;
                await ValueChanged.InvokeAsync(Value);
            }
        }
        else if (data is not null)
        {
            var response = await modalService.SelectNode(new Modal.SelectNode.SelectNodeRequest
            {
                Title = "Select Data",
                Value = "",
                PlaceHolder = "Enter the data path",
                AllowedTypes = [NodeType.Data]
            });
            if (response is not null && !response.NodePath.Equals(data.DataPath))
            {
                data.DataPath = response.NodePath;
                innerValue = data.DataPath;
                await ValueChanged.InvokeAsync(Value);
            }
        }
    }
}
 *@