@using System.Text.RegularExpressions
@using Runner.Business.Datas.Model
@using Runner.Business.Datas.Object
@using System.Text.Json
@inherits ModalBase
@inject ClipboardInterop clipboard

<div class="modal is-active">
    <div class="modal-background" @onclick=Close></div>
    <div class="modal-card w70">
        <header class="modal-card-head">
            <p class="modal-card-title">Data</p>
            <button class="delete" aria-label="close" @onclick=Close></button>
        </header>
        <section class="modal-card-body">
            <div class="block">
                <pre><code>
                    @text
                </code></pre>
            </div>
        </section>
        <footer class="modal-card-foot is-justify-content-flex-end">
            <button class="button is-primary" @onclick=Copy>
                <span class="icon is-small">
                    <i class="fa-regular fa-clipboard"></i>
                </span>
                <span>Copy</span>
            </button>
            <button class="button" @onclick=Close>Close</button>
        </footer>
    </div>
    <button class="modal-close is-large" aria-label="close" @onclick=Close></button>
</div>

@code {

    private string text = "";

    protected override void OnInitialized()
    {
        var dataObject = Control.Request as DataObject;
        if (dataObject is null)
        {
            throw new Exception("ShowDataJsonRequest invalid!");
        }

        var data = Map(dataObject.Properties);

        text = JsonSerializer.Serialize(data, new JsonSerializerOptions
            {
                WriteIndented = true
            });
    }

    private List<JsonProperty> Map(List<DataHandlerItem> datas)
    {
        var ret = new List<JsonProperty>();
        foreach (var data in datas)
        {
            switch (data.Type)
            {
                case DataTypeEnum.String:
                    ret.Add(new JsonProperty
                        {
                            Name = data.Name,
                            Type = data.Type.ToString(),
                            Value = data.Value?.StringValue
                        });
                    break;
                case DataTypeEnum.StringList:
                    ret.Add(new JsonProperty
                        {
                            Name = data.Name,
                            Type = data.Type.ToString(),
                            Value = data.Value?.StringListValue
                        });
                    break;
                case DataTypeEnum.Node:
                    ret.Add(new JsonProperty
                        {
                            Name = data.Name,
                            Type = data.Type.ToString(),
                            Value = data.Value?.NodePath
                        });
                    break;
                case DataTypeEnum.Inherit:
                    ret.Add(new JsonProperty
                        {
                            Name = data.Name,
                            Type = data.Type.ToString(),
                            Value = data.Value?.NodePath
                        });
                    break;
                case DataTypeEnum.Data:
                    ret.Add(new JsonProperty
                        {
                            Name = data.Name,
                            Type = data.Type.ToString(),
                            Value = data.Value?.DataExpand is null ?
                                null :
                                Map(data.Value.DataExpand)
                        });
                    break;
                case DataTypeEnum.ScriptVersion:
                    ret.Add(new JsonProperty
                        {
                            Name = data.Name,
                            Type = data.Type.ToString(),
                            Value = data.Value?.NodePath
                        });
                        break;
            }
        }

        return ret;
    }

    private Task Copy()
    {
        return clipboard.WriteTextAsync(text);
    }
}
