@using Runner.Business.Model.Table
@typeparam TItem
@inject Runner.WebUI.Components.Notification.NotificationService notification

<table class="table is-bordered is-striped is-narrow is-hoverable is-fullwidth">
    <thead>
        @Header
    </thead>
    <tbody>
        @if (items is not null)
        @foreach (var item in items)
        {
            @Body(item)
        }
    </tbody>
    <tfoot>
        <tr>
            <td colspan="999">
                <nav class="pagination" role="navigation" aria-label="pagination">
                    <ul class="pagination-list">
                        @if (pages is not null)
                        @foreach (var goPage in pages)
                        {
                            if (goPage == page)
                            {
                                <li>
                                    <a class="pagination-link is-current" aria-label="Page @goPage">@goPage</a>
                                </li>
                            }
                            else
                            {
                                <li>
                                    <a class="pagination-link" aria-label="Goto page @goPage" @onclick=@(() => ChangePage(goPage))>@goPage</a>
                                </li>
                            }
                        }
                    </ul>
                    <ul class="pagination-take">
                        @foreach (var take in new int[] { 10, 20, 30, 50, 100 })
                        {
                            if (take == tableRequest.Take)
                            {
                                <li>
                                    <a class="pagination-link is-current" aria-label="Take @take">@take</a>
                                </li>
                            }
                            else
                            {
                                <li>
                                    <a class="pagination-link" aria-label="Take @take" @onclick=@(() => ChangeTake(take))>@take</a>
                                </li>
                            }
                        }
                    </ul>
                </nav>
            </td>
        </tr>
    </tfoot>
</table>

@code {

    private List<TItem>? items;
    private TableRequest tableRequest = new();
    private int page = 1;
    private List<int>? pages;

    [Parameter]
    public required RenderFragment Header { get; set; }

    [Parameter]
    public required RenderFragment<TItem> Body { get; set; }

    [Parameter]
    public required Func<TableRequest, Task<List<TItem>>> Func { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await Refresh();
        }
        catch (Exception err)
        {
            await notification.AddError(err);
        }
    }

    public async Task Refresh()
    {
        items = await Func(tableRequest);
        MakePages();
    }

    private async Task ChangeTake(int take)
    {
        tableRequest.Take = take;
        try
        {
            await Refresh();
        }
        catch (Exception err)
        {
            await notification.AddError(err);
        }
    }

    private async Task ChangePage(int gotoPage)
    {
        page = gotoPage;
        tableRequest.Skip = (page - 1) * tableRequest.Take;
        try
        {
            await Refresh();
        }
        catch (Exception err)
        {
            await notification.AddError(err);
        }
    }

    private void MakePages()
    {
        if (page <= 4)
        {
            pages = [1, 2, 3, 4, 5, 6, 20];
        }
        else if (page > 4 && page < 20)
        {
            pages = [1, page - 2, page - 1, page, page + 1, page + 2, page + 19];
        }
        else
        {
            pages = [page - 19, page - 2, page - 1, page, page + 1, page + 2, page + 19];
        }
    }
}
