@using MongoDB.Bson
@using Runner.Business.Datas.Model
@inherits NodeBasePage
@inject DataTypeService dataTypeService
@inject NodeService nodeService

<div class="container">

    <div class="box mt-4">
        <h3 class="title is-3">DataType: @Node.Name <NodeTypeIcon Type="NodeType.DataType" /></h3>
    </div>

    <div class="is-flex is-justify-content-space-between">
        <div class="is-flex is-gap">
            <button type="button" class="button is-primary" @onclick="NodeBack">
                <span class="icon is-small">
                    <i class="fa-solid fa-square-caret-left"></i>
                </span>
            </button>
            <button type="button" class="button is-primary" @onclick="OnRename_Click">
                <span class="icon is-small">
                    <i class="fa-solid fa-signature"></i>
                </span>
                <span>Rename</span>
            </button>
            <button type="button" class="button is-success" @onclick="OnSave_Click">
                <span class="icon is-small">
                    <i class="fa-solid fa-floppy-disk"></i>
                </span>
                <span>Save</span>
            </button>
            <button type="button" class="button is-danger" @onclick="OnDelete_Click">
                <span class="icon is-small">
                    <i class="fa-solid fa-trash"></i>
                </span>
                <span>Delete</span>
            </button>
        </div>
        <Dropdown IsRight Icon="fa-solid fa-ellipsis">
             <a class="dropdown-item" @onclick=FavoriteThisNode>
                 <i class="fa-solid fa-star"></i>
                 <span>Favorite</span>
             </a>
             <a class="dropdown-item" @onclick=CopyPathToClipboard>
                 <i class="fa-brands fa-stackpath"></i>
                 <span>Node Path</span>
             </a>
             <hr class="dropdown-divider">
             <div class="dropdown-item" @onclick="OnRename_Click">
                 <i class="fa-solid fa-signature"></i>
                 <span>Rename</span>
             </div>
             <div class="dropdown-item">
                 <i class="fa-solid fa-scissors"></i>
                 <span>Mark to move</span>
             </div>
             <div class="dropdown-item">
                 <i class="fa-solid fa-paste"></i>
                 <span>Move marked here</span>
             </div>
             <hr class="dropdown-divider">
             <a class="dropdown-item" @onclick="OnDelete_Click">
                 <i class="fa-solid fa-trash has-text-danger"></i>
                 <span>Delete</span>
             </a>
         </Dropdown>
     </div>

    @if (dataTypeNode != null)
    {
        <div class="box mt-3">
            <DataTypeEditor Properties=dataTypeNode.Properties />
        </div>
    }
</div>

@code {

    private Runner.Business.Entities.Nodes.Types.DataType? dataTypeNode;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            dataTypeNode = await dataTypeService.ReadByNodeId(Node.NodeId);
            Assert.MustNotNull(dataTypeNode, "DataType not found!");
        }
        catch (Exception err)
        {
            await Notification.AddError(err);
            PageNotFound();
        }
    }

    private async Task OnSave_Click()
    {
        try
        {
            Assert.MustNotNull(dataTypeNode, "DataType load fail!");

            await dataTypeService.Update(dataTypeNode);
            NodeBack();
        }
        catch (Exception err)
        {
            await Notification.AddError(err);
        }
    }

    private async Task OnDelete_Click()
    {
        if (await Modal.Question(new Components.Modal.Question.QuestionRequest
            {
                Title = "Delete",
                Question = "Confirm delete this node?"
            }) ?? false)
        {
            try
            {
                await dataTypeService.DeleteByNode(Node);
            }
            catch (Exception err)
            {
                await Notification.AddError(err);
                return;
            }

            NodeBack();
        }
    }

    private async Task OnRename_Click()
    {
        var newName = await Modal.InputText(new Components.Modal.Inputs.InputTextRequest
            {
                Title = "Rename Node",
                Value = Node.Name,
                PlaceHolder = "Node name"
            });

        if (!string.IsNullOrEmpty(newName))
        {
            try
            {
                await nodeService.UpdateName(Node.NodeId, newName);

                Node.Name = newName;
            }
            catch (Exception err)
            {
                await Notification.AddError(err);
            }
        }
    }
}
