@using MongoDB.Bson
@using Runner.Business.Entities.Nodes.Types
@inherits NodeBasePage
@inject AgentPoolService agentPoolService
@inject NodeService nodeService

<div class="container">

    <div class="box mt-4">
        <h3 class="title is-3">Agent Pool: @Node.Name <NodeTypeIcon Type="NodeType.AgentPool" /></h3>
    </div>

    <div class="buttons mt-3">
        <button type="button" class="button is-primary" @onclick="NodeBack">
            <span class="icon is-small">
                <i class="fa-solid fa-square-caret-left"></i>
            </span>
        </button>
        <button type="button" class="button is-info" @onclick="OnRefresh_Click">
            <span class="icon is-small">
                <i class="fa-solid fa-rotate-right"></i>
            </span>
            <span>Refresh</span>
        </button>
        <button type="button" class="button is-primary" @onclick="OnRename_Click">
            <span class="icon is-small">
                <i class="fa-solid fa-signature"></i>
            </span>
            <span>Rename</span>
        </button>
        <button type="button" class="button is-danger" @onclick="OnDelete_Click">
            <span class="icon is-small">
                <i class="fa-solid fa-trash"></i>
            </span>
            <span>Delete</span>
        </button>
    </div>

    @if (agentPoolNode != null)
    {
        <div class="buttons mt-3">
            <Switch @bind-Value=agentPoolNode.Enabled AfterValueChanged="UpdateEnabled" />
        </div>
    }

    <div class="box mt-3">
        @if (items != null)
        {
            <DirectTable Items="items">
                <Header>
                    <tr>
                        <th class="w50px">Type</th>
                        <th>Name</th>
                        <th>Version</th>
                        <th>Status</th>
                        <th>LastExecuted</th>
                    </tr>
                </Header>
                <Body Context="Item">
                <tr class="pointer" @onclick="@(_ => OnItem_Click(Item))">
                        <td class="has-text-centered">
                            <NodeTypeIcon Type="NodeType.Agent" />
                        </td>
                        <td>@Item.MachineName</td>
                        <td>@Item.VersionName</td>
                        <td>@Item.Status</td>
                        <td>@Item.LastExecuted</td>
                    </tr>
                </Body>
            </DirectTable>
        }
    </div>
</div>

@code {

    private Runner.Business.Entities.Nodes.Types.AgentPool? agentPoolNode;
    private List<Runner.Business.Entities.Nodes.Types.Agent>? items;

    protected override async Task OnInitializedAsync()
    {
        agentPoolNode = await agentPoolService.ReadByNodeId(Node.NodeId);
        if (agentPoolNode == null)
        {
            await Notification.AddError("AgentPool not found!");
            PageNotFound();
        }
        else
        {
            await OnRefresh_Click();
        }
    }

    public async Task OnRefresh_Click()
    {
        items = await agentPoolService.ReadAgentForNodeId(Node.NodeId);
    }

    public async Task OnItem_Click(Runner.Business.Entities.Nodes.Types.Agent agent)
    {
        var agentNode = await nodeService.ReadByNodeId(agent.NodeId);
        Assert.MustNotNull(agentNode, "Internal error!");

        FowardNode(agentNode.Name);
    }

    private async Task OnDelete_Click()
    {
        if (await Modal.Question(new Components.Modal.Question.QuestionRequest
            {
                Title = "Delete",
                Question = "Confirm delete this node?"
            }) ?? false)
        {
            try
            {
                await agentPoolService.DeleteByNode(Node);
            }
            catch (Exception err)
            {
                await Notification.AddError(err);
                return;
            }

            NodeBack();
        }
    }

    private async Task OnRename_Click()
    {
        var newName = await Modal.InputText(new Components.Modal.Inputs.InputTextRequest
            {
                Title = "Rename Node",
                Value = Node.Name,
                PlaceHolder = "Node name"
            });

        if (!string.IsNullOrEmpty(newName))
        {
            try
            {
                await nodeService.UpdateName(Node.NodeId, newName);

                Node.Name = newName;
            }
            catch (Exception err)
            {
                await Notification.AddError(err);
                return;
            }
        }
    }

    private async Task UpdateEnabled()
    {
        Assert.MustNotNull(agentPoolNode, "Internal error!");

        try
        {
            await agentPoolService.UpdateEnabled(agentPoolNode);
        }
        catch (Exception err)
        {
            await Notification.AddError(err);
            return;
        }
    }
}
