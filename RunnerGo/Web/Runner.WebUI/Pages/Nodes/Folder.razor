@using MongoDB.Bson
@using Runner.Business.Model.Nodes.Types
@inherits NodeBasePage
@inject FolderService folderService
@inject NodeService nodeService
@inject IServiceProvider serviceProvider

<div class="container">

    <div class="box mt-4">
        <h3 class="title is-3">Folder: @Node.Name <NodeTypeIcon Type="NodeType.Folder" /></h3>
    </div>

    <div class="is-flex is-justify-content-space-between">
        <div class="is-flex is-gap">
            <button type="button" class="button is-primary" @onclick="NodeBack">
                <span class="icon is-small">
                    <i class="fa-solid fa-square-caret-left"></i>
                </span>
            </button>
            <button type="button" class="button is-info" @onclick="OnRefresh_Click">
                <span class="icon is-small">
                    <i class="fa-solid fa-rotate-right"></i>
                </span>
                <span>Refresh</span>
            </button>
            <button type="button" class="button is-success" @onclick="OnCreate_Click">
                <span class="icon is-small">
                    <i class="fa-solid fa-circle-plus"></i>
                </span>
                <span>Create</span>
            </button>
        </div>
        <Dropdown IsRight Icon="fa-solid fa-ellipsis">
             <a class="dropdown-item" @onclick=FavoriteThisNode>
                <i class="fa-solid fa-star"></i>
                <span>Favorite</span>
             </a>
             <a class="dropdown-item" @onclick=CopyPathToClipboard>
                 <i class="fa-brands fa-stackpath"></i>
                 <span>Node Path</span>
             </a>
             <hr class="dropdown-divider">
             <div class="dropdown-item" @onclick="OnRename_Click">
                 <i class="fa-solid fa-signature"></i>
                 <span>Rename</span>
             </div>
             <div class="dropdown-item">
                 <i class="fa-solid fa-scissors"></i>
                 <span>Mark to move</span>
             </div>
             <div class="dropdown-item">
                 <i class="fa-solid fa-paste"></i>
                 <span>Move marked here</span>
             </div>
             <hr class="dropdown-divider">
             <a class="dropdown-item" @onclick="OnDelete_Click">
                 <i class="fa-solid fa-trash has-text-danger"></i>
                 <span>Delete</span>
             </a>
        </Dropdown>
    </div>

    <div class="box mt-5">
        <DataTable @ref=table Func=@((request) => nodeService.ReadChildsTable(request, Node.NodeId))>
            <Header>
                <tr>
                    <th class="w50px">Type</th>
                    <th>Name</th>
                    <th>Created</th>
                    <th>Updated</th>
                </tr>
            </Header>
            <Body Context="Item">
                <tr class="pointer" @onclick="@(_ => OnItem_Click(Item))">
                    <td class="has-text-centered">
                        <NodeTypeIcon Type="Item.Type" />
                    </td>
                    <td>@Item.Name</td>
                    <td>@Item.CreatedUtc</td>
                    <td>@Item.UpdatedUtc</td>
                </tr>
            </Body>
        </DataTable>
    </div>
</div>

@code {

    private DataTable<Node>? table;

    public async Task OnRefresh_Click()
    {
        try
        {
            if (table is not null)
            {
                await table.Refresh();
            }
        }
        catch (Exception err)
        {
            await Notification.AddError(err);
        }
    }

    public async Task OnCreate_Click()
    {
        var reponse = await Modal.CreateNode();
        if (reponse == null)
        {
            return;
        }

        try
        {
            switch (reponse.NodeType)
            {
                case NodeType.Folder:
                    {
                        var folderService = serviceProvider.GetRequiredService<Business.Services.NodeTypes.FolderService>();
                        await folderService.Create(reponse.Name, Node.NodeId);
                        break;
                    }
                case NodeType.AgentPool:
                    {
                        var agentPoolService = serviceProvider.GetRequiredService<Business.Services.NodeTypes.AgentPoolService>();
                        await agentPoolService.Create(reponse.Name, Node.NodeId);
                        break;
                    }
                case NodeType.Data:
                    {
                        var dataService = serviceProvider.GetRequiredService<Business.Services.NodeTypes.DataService>();
                        await dataService.Create(reponse.Name, Node.NodeId);
                        break;
                    }
                case NodeType.ScriptPackage:
                    {
                        var scriptPackageService = serviceProvider.GetRequiredService<Business.Services.NodeTypes.ScriptPackageService>();
                        await scriptPackageService.Create(reponse.Name, Node.NodeId);
                        break;
                    }
                case NodeType.Flow:
                    {
                        var flowService = serviceProvider.GetRequiredService<Business.Services.NodeTypes.FlowService>();
                        await flowService.Create(reponse.Name, Node.NodeId);
                        break;
                    }
                default:
                    throw new Exception("Invalid type!");
            }
        }
        catch (Exception err)
        {
            await Notification.AddError(err);
            return;
        }

        await OnRefresh_Click();
    }

    public void OnItem_Click(Node node)
    {
        FowardNode(node);
    }

    private async Task OnDelete_Click()
    {
        if (await Modal.Question(new Components.Modal.Question.QuestionRequest
            {
                Title = "Delete",
                Question = "Confirm delete this node?"
            }) ?? false)
        {
            try
            {
                await folderService.DeleteByNode(Node);
            }
            catch (Exception err)
            {
                await Notification.AddError(err);
                return;
            }

            NodeBack();
        }
    }

    private async Task OnRename_Click()
    {
        var newName = await Modal.InputText(new Components.Modal.Inputs.InputTextRequest
            {
                Title = "Rename Node",
                Value = Node.Name,
                PlaceHolder = "Node name"
            });

        if (!string.IsNullOrEmpty(newName))
        {
            try
            {
                await nodeService.UpdateName(Node.NodeId, newName);

                Node.Name = newName;
            }
            catch (Exception err)
            {
                await Notification.AddError(err);
                return;
            }
        }
    }
}
