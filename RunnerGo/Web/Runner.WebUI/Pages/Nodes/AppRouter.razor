@page "/app/{*PageRoute}"
@inherits BasePage
@using Runner.Business.Entities.Nodes
@inject NodeService nodeService

@if (_view is not null)
{
    <DynamicComponent Type="_view" Parameters="_viewParameters" />
}

@code {

    private Type? _view;
    private Dictionary<string, object?> _viewParameters = new Dictionary<string, object?>();
    private string? actualRoute;

    [Parameter]
    public string? PageRoute { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (PageRoute == actualRoute)
        {
            return;
        }
        actualRoute = PageRoute;

        _view = null;
        StateHasChanged();

        if (string.IsNullOrEmpty(PageRoute))
        {
            RouteHome();
            return;
        }

        var parts = new System.Collections.Queue(PageRoute
            .Split("/", StringSplitOptions.RemoveEmptyEntries));

        var node = await nodeService.ReadLocation(parts);
        if (node is null)
        {
            RouteHome();
            return;
        }

        _viewParameters.Clear();

        _viewParameters["Node"] = node;
        _view = RouteNode(node.Type);
        StateHasChanged();
    }

    private void RouteHome()
    {
        NavigateTo("/");
    }

    private Type RouteNode(NodeType type)
    {
        switch (type)
        {
            case NodeType.App: return typeof(Nodes.App);
            case NodeType.Folder: return typeof(Nodes.Folder);
            case NodeType.AgentPool: return typeof(Nodes.AgentPool);
            // case NodeType.Agent: return typeof(Nodes.Agent);
            // case NodeType.Flow: return typeof(Nodes.Flow.Flow);
            // case NodeType.Run: return typeof(Nodes.Run.RunView);
            case NodeType.Data: return typeof(Nodes.Data);
            case NodeType.DataType: return typeof(Nodes.DataType);
            default: throw new RunnerException($"Invalid NodeType: {type}");
        }
    }
}
