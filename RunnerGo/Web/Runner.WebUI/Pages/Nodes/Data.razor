@using Runner.Business.Datas.Model
@using Runner.Business.Datas.Object
@using Runner.Business.Entities.Nodes.Types
@inherits NodeBasePage
@inject DataService dataService
@inject NodeService nodeService
@inject DataExpandService dataExpandService

<div class="container">

    <div class="box mt-4">
        <h3 class="title is-3">Data: @Node.Name <NodeTypeIcon Type="NodeType.Data" /></h3>
    </div>

    <div class="is-flex is-justify-content-space-between">
        <div class="is-flex is-gap">
            <button type="button" class="button is-primary" @onclick="NodeBack">
                <span class="icon is-small">
                    <i class="fa-solid fa-square-caret-left"></i>
                </span>
            </button>
            <button type="button" class="button is-success" @onclick="OnSave_Click">
                <span class="icon is-small">
                    <i class="fa-solid fa-floppy-disk"></i>
                </span>
                <span>Save</span>
            </button>
            <button type="button" class="button is-warning" @onclick="OnValidate_Click">
                <span class="icon is-small">
                    <i class="fa-solid fa-list-check"></i>
                </span>
                <span>Validate</span>
            </button>
            <button type="button" class="button is-primary" @onclick="OnView_Click">
                <span class="icon is-small">
                    <i class="fa-solid fa-scroll"></i>
                </span>
                <span>View</span>
            </button>
        </div>
        <Dropdown IsRight Icon="fa-solid fa-ellipsis">
             <a class="dropdown-item" @onclick=FavoriteThisNode>
                 <i class="fa-solid fa-star"></i>
                 <span>Favorite</span>
             </a>
             <a class="dropdown-item" @onclick=CopyPathToClipboard>
                 <i class="fa-brands fa-stackpath"></i>
                 <span>Node Path</span>
             </a>
             <hr class="dropdown-divider">
             <div class="dropdown-item" @onclick="OnRename_Click">
                 <i class="fa-solid fa-signature"></i>
                 <span>Rename</span>
             </div>
             <div class="dropdown-item">
                 <i class="fa-solid fa-scissors"></i>
                 <span>Mark to move</span>
             </div>
             <div class="dropdown-item">
                 <i class="fa-solid fa-paste"></i>
                 <span>Move marked here</span>
             </div>
             <hr class="dropdown-divider">
             <a class="dropdown-item" @onclick="OnDelete_Click">
                 <i class="fa-solid fa-trash has-text-danger"></i>
                 <span>Delete</span>
             </a>
         </Dropdown>
     </div>

    <div class="box mt-3">
        <DatasEditor Value=data />
    </div>
</div>

 @code {

    private Runner.Business.Entities.Nodes.Types.Data? dataNode { get; set; }
    private DataObject? data;

    protected override async Task OnInitializedAsync()
    {
        dataNode = await dataService.ReadByNodeId(Node.NodeId);
        if (dataNode == null)
        {
            await Notification.AddError("DataType not found!");
            PageNotFound();
        }
        else
        {
            data = new DataObject(dataNode.Properties, dataExpandService);
            await data.Resolve(false);
        }
    }

    private async Task OnValidate_Click()
    {
        try
        {
            if (data is null)
            {
                return;
            }

            var errors = data.Validate();
            if (errors.Any())
            {
                foreach (var error in errors)
                {
                    await Notification.AddWarning(error.Text, 10);
                }
                return;
            }
        }
        catch (Exception err)
        {
            await Notification.AddError(err);
        }
    }

    private async Task OnSave_Click()
    {
        try
        {
            Assert.MustNotNull(dataNode, "DataType load fail!");
            Assert.MustNotNull(data, "Dat load fail!");

            dataNode.Properties = data.ToDataProperty();

            await dataService.Update(dataNode);
            NodeBack();
        }
        catch (Exception err)
        {
            await Notification.AddError(err);
        }
    }

    // private async Task OnApply_Click()
    // {
    //     try
    //     {
    //         Assert.MustNotNull(dataNode, "DataType load fail!");

    //         var node = await nodeService.ReadLocation(dataNode.DataTypePath ?? string.Empty);
    //         if (node is null)
    //         {
    //             await Notification.AddInfo("DataType not found!");
    //             return;
    //         }

    //         var dataType = await dataTypeService.ReadByNodeId(node.NodeId);
    //         if (dataType is null)
    //         {
    //             await Notification.AddInfo("DataType not found!");
    //             return;
    //         }

    //         dataNode.DataTypeId = dataType.DataTypeId;

    //         datas = new DataMerge()
    //             //.ApplyDataTypeProperty(dataType.Properties)
    //             .ApplyDataFullProperty(datas)
    //             .ToDataFullProperty();
    //     }
    //     catch (Exception err)
    //     {
    //         await Notification.AddError(err);
    //     }
    // }

    private async Task OnDelete_Click()
    {
        if (await Modal.Question(new Components.Modal.Question.QuestionRequest
            {
                Title = "Delete",
                Question = "Confirm delete this node?"
            }) ?? false)
        {
            try
            {
                await dataService.DeleteByNode(Node);
            }
            catch (Exception err)
            {
                await Notification.AddError(err);
                return;
            }

            NodeBack();
        }
    }

    private async Task OnRename_Click()
    {
        var newName = await Modal.InputText(new Components.Modal.Inputs.InputTextRequest
            {
                Title = "Rename Node",
                Value = Node.Name,
                PlaceHolder = "Node name"
            });

        if (!string.IsNullOrEmpty(newName))
        {
            try
            {
                await nodeService.UpdateName(Node.NodeId, newName);

                Node.Name = newName;
            }
            catch (Exception err)
            {
                await Notification.AddError(err);
            }
        }
    }

    private async Task OnView_Click()
    {
        if (data is not null)
        {
            await data.Resolve();
            await Modal.ShowData(data);
        }
    }
}
