@using Runner.Business.Datas.Control
@using Runner.Business.Datas.Model
@using Runner.Business.Datas.Validator
@using Runner.Business.Entities.Nodes.Types
@inherits NodeBasePage
@inject DataService dataService
@inject DataTypeService dataTypeService
@inject NodeService nodeService

<div class="container">

    <div class="box mt-4">
        <h3 class="title is-3">Data: @Node.Name <NodeTypeIcon Type="NodeType.Data" /></h3>
    </div>

    <div class="is-flex is-justify-content-space-between">
        <div class="is-flex is-gap">
            <button type="button" class="button is-primary" @onclick="NodeBack">
                <span class="icon is-small">
                    <i class="fa-solid fa-square-caret-left"></i>
                </span>
            </button>
            <button type="button" class="button is-primary" @onclick="OnRename_Click">
                <span class="icon is-small">
                    <i class="fa-solid fa-signature"></i>
                </span>
                <span>Rename</span>
            </button>
            <button type="button" class="button is-success" @onclick="OnSave_Click">
                <span class="icon is-small">
                    <i class="fa-solid fa-floppy-disk"></i>
                </span>
                <span>Save</span>
            </button>
            <button type="button" class="button is-danger" @onclick="OnDelete_Click">
                <span class="icon is-small">
                    <i class="fa-solid fa-trash"></i>
                </span>
                <span>Delete</span>
            </button>
        </div>
        <Dropdown IsRight Icon="fa-solid fa-ellipsis">
             <a class="dropdown-item" @onclick=FavoriteThisNode>
                 <i class="fa-solid fa-star"></i>
                 <span>Favorite</span>
             </a>
             <a class="dropdown-item" @onclick=CopyPathToClipboard>
                 <i class="fa-brands fa-stackpath"></i>
                 <span>Node Path</span>
             </a>
             <hr class="dropdown-divider">
             <div class="dropdown-item" @onclick="OnRename_Click">
                 <i class="fa-solid fa-signature"></i>
                 <span>Rename</span>
             </div>
             <div class="dropdown-item">
                 <i class="fa-solid fa-scissors"></i>
                 <span>Mark to move</span>
             </div>
             <div class="dropdown-item">
                 <i class="fa-solid fa-paste"></i>
                 <span>Move marked here</span>
             </div>
             <hr class="dropdown-divider">
             <a class="dropdown-item" @onclick="OnDelete_Click">
                 <i class="fa-solid fa-trash has-text-danger"></i>
                 <span>Delete</span>
             </a>
         </Dropdown>
     </div>

    @if (dataNode is not null)
    {
        <div class="box mt-3">
            <div class="field has-addons">
                <div class="control">
                    <input class="input" type="text" @bind=dataNode.DataTypePath placeholder="Apply DataType">
                </div>
                <div class="control">
                    <button class="button is-info" @onclick=OnApply_Click>
                        Apply
                    </button>
                </div>
            </div>
        </div>

        <div class="box mt-3">
            @if (datas is not null)
            {
                <DataFullEditor Properties=datas />
            }
        </div>
    }
</div>

@code {

    private Runner.Business.Entities.Nodes.Types.Data? dataNode { get; set; }
    private List<DataFullProperty>? datas;

    protected override async Task OnInitializedAsync()
    {
        dataNode = await dataService.ReadByNodeId(Node.NodeId);
        if (dataNode == null)
        {
            await Notification.AddError("DataType not found!");
            PageNotFound();
        }
        else
        {
            if (dataNode.DataTypeId.HasValue)
            {
                var dataType = await dataTypeService.ReadById(dataNode.DataTypeId.Value);
                if (dataType is null)
                {
                    await Notification.AddError("DataType not found!");
                }
                else
                {
                    datas = new DataMerge()
                        .ApplyDataTypeProperty(dataType.Properties)
                        .ApplyDataProperty(dataNode.Properties)
                        .ToDataFullProperty();
                }
            }
            else
            {
                datas = new DataMerge()
                    .ApplyDataProperty(dataNode.Properties)
                    .ToDataFullProperty();
            }
        }
    }

    private async Task OnSave_Click()
    {
        try
        {
            Assert.MustNotNull(dataNode, "DataType load fail!");

            if (datas is not null)
            {
                var errors = DataValidator.Validate(datas);
                if (errors.Any())
                {
                    foreach (var error in errors)
                    {
                        await Notification.AddInfo(error.Text, 0);
                    }
                    return;
                }

                dataNode.Properties = datas
                    .Select(d => d.ToDataProperty())
                    .ToList();
            }

            await dataService.Update(dataNode);
            NodeBack();
        }
        catch (Exception err)
        {
            await Notification.AddError(err);
        }
    }

    private async Task OnApply_Click()
    {
        try
        {
            Assert.MustNotNull(dataNode, "DataType load fail!");

            var node = await nodeService.ReadLocation(dataNode.DataTypePath ?? string.Empty);
            if (node is null)
            {
                await Notification.AddInfo("DataType not found!");
                return;
            }

            var dataType = await dataTypeService.ReadByNodeId(node.NodeId);
            if (dataType is null)
            {
                await Notification.AddInfo("DataType not found!");
                return;
            }

            dataNode.DataTypeId = dataType.DataTypeId;

            datas = new DataMerge()
                .ApplyDataTypeProperty(dataType.Properties)
                .ApplyDataFullProperty(datas)
                .ToDataFullProperty();
        }
        catch (Exception err)
        {
            await Notification.AddError(err);
        }
    }

    private async Task OnDelete_Click()
    {
        if (await Modal.Question(new Components.Modal.Question.QuestionRequest
            {
                Title = "Delete",
                Question = "Confirm delete this node?"
            }) ?? false)
        {
            try
            {
                await dataService.DeleteByNode(Node);
            }
            catch (Exception err)
            {
                await Notification.AddError(err);
                return;
            }

            NodeBack();
        }
    }

    private async Task OnRename_Click()
    {
        var newName = await Modal.InputText(new Components.Modal.Inputs.InputTextRequest
            {
                Title = "Rename Node",
                Value = Node.Name,
                PlaceHolder = "Node name"
            });

        if (!string.IsNullOrEmpty(newName))
        {
            try
            {
                await nodeService.UpdateName(Node.NodeId, newName);

                Node.Name = newName;
            }
            catch (Exception err)
            {
                await Notification.AddError(err);
            }
        }
    }
}
