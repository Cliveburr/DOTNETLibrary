@using Runner.Business.Datas.Control
@using Runner.Business.Datas.Model
@using Runner.Business.Datas.Validator
@using Runner.Business.Entities.Nodes.Types
@inherits NodeBasePase
@inject DataService dataService
@inject DataTypeService dataTypeService
@inject NodeService nodeService

<div class="container">

    <div class="box mt-4">
        <h3 class="title is-3">Data: @Node.Name <NodeTypeIcon Type="NodeType.Data" /></h3>
    </div>

    <div class="buttons mt-3">
        <button type="button" class="button is-primary" @onclick="NodeBack">
            <span class="icon is-small">
                <i class="fa-solid fa-square-caret-left"></i>
            </span>
        </button>
        <button type="button" class="button is-primary" @onclick="OnRename_Click">
            <span class="icon is-small">
                <i class="fa-solid fa-signature"></i>
            </span>
            <span>Rename</span>
        </button>
        <button type="button" class="button is-success" @onclick="OnSave_Click">
            <span class="icon is-small">
                <i class="fa-solid fa-floppy-disk"></i>
            </span>
            <span>Save</span>
        </button>
        <button type="button" class="button is-danger" @onclick="OnDelete_Click">
            <span class="icon is-small">
                <i class="fa-solid fa-trash"></i>
            </span>
            <span>Delete</span>
        </button>
    </div>

    @if (dataNode is not null)
    {
        <div class="box mt-3">
            <div class="field has-addons">
                <div class="control">
                    <input class="input" type="text" @bind=dataNode.DataTypePath placeholder="Apply DataType">
                </div>
                <div class="control">
                    <button class="button is-info" @onclick=OnApply_Click>
                        Apply
                    </button>
                </div>
            </div>
        </div>

        <div class="box mt-3">
            @if (datas is not null)
            {
                <table class="table is-bordered is-striped is-narrow is-hoverable is-fullwidth">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Type</th>
                            <th>Value</th>
                            <th class="w50px"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var data in datas)
                        {
                            <tr>
                                <td>
                                    <p class="control has-icons-left">
                                        <input class="input" @bind=data.Name type="text" placeholder="Name" readonly="@(!data.IsEditable)">
                                        <span class="icon is-small is-left">
                                            <i class="fa-solid fa-key"></i>
                                        </span>
                                    </p>
                                </td>
                                <td>
                                    @if (data.IsEditable)
                                    {
                                        <div class="control has-icons-left is-expanded">
                                            <div class="select is-fullwidth">
                                                <EnumSelect @bind-Value=data.Type />
                                            </div>
                                            <div class="icon is-small is-left">
                                                <i class="fa-solid fa-superscript"></i>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <p class="control has-icons-left">
                                            <input class="input" value=@data.Type type="text" readonly>
                                            <span class="icon is-small is-left">
                                                <i class="fa-solid fa-superscript"></i>
                                            </span>
                                        </p>
                                    }
                                </td>
                                <td>
                                    <p class="control has-icons-left">
                                        <DataTypeSelector Type=data.Type @bind-Value=data.Value />
                                        <span class="icon is-small is-left">
                                            <i class="fa-solid fa-suitcase"></i>
                                        </span>
                                    </p>
                                </td>
                                <td class="has-text-centered">
                                    @if (data.IsEditable)
                                    {
                                        <button class="button is-danger" @onclick=@(() => OnRemove_Click(data))>
                                            <span class="icon is-small">
                                                <i class="fas fa-times"></i>
                                            </span>
                                        </button>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <button type="button" class="button is-success" @onclick="OnCreate_Click">
                    <span class="icon is-small">
                        <i class="fa-solid fa-circle-plus"></i>
                    </span>
                    <span>Add</span>
                </button>
            }
        </div>
    }
</div>

@code {

    private Runner.Business.Entities.Nodes.Types.Data? dataNode { get; set; }
    private List<DataFullProperty>? datas;

    protected override async Task OnInitializedAsync()
    {
        dataNode = await dataService.ReadByNodeId(Node.NodeId);
        if (dataNode == null)
        {
            await Notification.AddError("DataType not found!");
            PageNotFound();
        }
        else
        {
            if (dataNode.DataTypeId.HasValue)
            {
                var dataType = await dataTypeService.ReadById(dataNode.DataTypeId.Value);
                if (dataType is null)
                {
                    await Notification.AddError("DataType not found!");
                }
                else
                {
                    datas = DataMerge.Merge(dataNode.Properties, dataType.Properties);
                }
            }
            else
            {
                datas = DataMerge.Merge(dataNode.Properties);
            }
        }
    }

    private async Task OnSave_Click()
    {
        try
        {
            Assert.MustNotNull(dataNode, "DataType load fail!");

            if (datas is not null)
            {
                var errors = DataValidator.Validate(datas);
                if (errors.Any())
                {
                    foreach (var error in errors)
                    {
                        await Notification.AddInfo(error.Text, 0);
                    }
                    return;
                }

                dataNode.Properties = datas
                    .Select(d => d.ToDataProperty())
                    .ToList();
            }

            await dataService.Update(dataNode);
            NodeBack();
        }
        catch (Exception err)
        {
            await Notification.AddError(err);
        }
    }

    private async Task OnApply_Click()
    {
        try
        {
            Assert.MustNotNull(dataNode, "DataType load fail!");

            var node = await nodeService.ReadLocation(dataNode.DataTypePath ?? string.Empty);
            if (node is null)
            {
                await Notification.AddInfo("DataType not found!");
                return;
            }

            var dataType = await dataTypeService.ReadByNodeId(node.NodeId);
            if (dataType is null)
            {
                await Notification.AddInfo("DataType not found!");
                return;
            }

            dataNode.DataTypeId = dataType.DataTypeId;

            datas = DataMerge.Merge(null, dataType.Properties, datas);
        }
        catch (Exception err)
        {
            await Notification.AddError(err);
        }
    }

    private async Task OnDelete_Click()
    {
        if (await Modal.Question(new Components.Modal.Question.QuestionRequest
            {
                Title = "Delete",
                Question = "Confirm delete this node?"
            }) ?? false)
        {
            try
            {
                await dataService.DeleteByNode(Node);
            }
            catch (Exception err)
            {
                await Notification.AddError(err);
                return;
            }

            NodeBack();
        }
    }

    private async Task OnRename_Click()
    {
        var newName = await Modal.InputText(new Components.Modal.Inputs.InputTextRequest
            {
                Title = "Rename Node",
                Value = Node.Name,
                PlaceHolder = "Node name"
            });

        if (!string.IsNullOrEmpty(newName))
        {
            try
            {
                await nodeService.UpdateName(Node.NodeId, newName);

                Node.Name = newName;
            }
            catch (Exception err)
            {
                await Notification.AddError(err);
            }
        }
    }

    private async Task OnCreate_Click()
    {
        try
        {
            Assert.MustNotNull(datas, "Internal - datas null!");

            datas.Add(new DataFullProperty(new DataProperty
            {
                Name = "NewProperty",
                Type = DataTypeEnum.String,
                Value = string.Empty
            }));
        }
        catch (Exception err)
        {
            await Notification.AddError(err);
            return;
        }
    }

    private async Task OnRemove_Click(DataFullProperty data)
    {
        try
        {
            Assert.MustNotNull(datas, "Internal - datas null!");

            if (datas.Contains(data))
            {
                datas.Remove(data);
            }
        }
        catch (Exception err)
        {
            await Notification.AddError(err);
        }
    }
}
