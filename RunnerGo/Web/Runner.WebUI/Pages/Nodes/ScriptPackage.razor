@using MongoDB.Bson
@using Runner.Business.Model.Nodes.Types
@inherits NodeBasePage
@inject ScriptPackageService scriptPackageService
@inject NodeService nodeService
@inject IServiceProvider serviceProvider

<div class="container">

    <div class="box mt-4">
        <h3 class="title is-3">ScriptPackage: @Node.Name <NodeTypeIcon Type="NodeType.ScriptPackage" /></h3>
    </div>

    <div class="is-flex is-justify-content-space-between">
        <div class="is-flex is-gap">
            <button type="button" class="button is-primary" @onclick="NodeBack">
                <span class="icon is-small">
                    <i class="fa-solid fa-square-caret-left"></i>
                </span>
            </button>
            <button type="button" class="button is-info" @onclick="OnRefresh_Click">
                <span class="icon is-small">
                    <i class="fa-solid fa-rotate-right"></i>
                </span>
                <span>Refresh</span>
            </button>
        </div>
        <Dropdown IsRight Icon="fa-solid fa-ellipsis">
             <a class="dropdown-item" @onclick=FavoriteThisNode>
                <i class="fa-solid fa-star"></i>
                <span>Favorite</span>
             </a>
             <a class="dropdown-item" @onclick=CopyPathToClipboard>
                 <i class="fa-brands fa-stackpath"></i>
                 <span>Node Path</span>
             </a>
             <hr class="dropdown-divider">
             <a class="dropdown-item" @onclick="OnRename_Click">
                 <i class="fa-solid fa-signature"></i>
                 <span>Rename</span>
             </a>
             <div class="dropdown-item">
                 <i class="fa-solid fa-scissors"></i>
                 <span>Mark to move</span>
             </div>
             <div class="dropdown-item">
                 <i class="fa-solid fa-paste"></i>
                 <span>Move marked here</span>
             </div>
             <hr class="dropdown-divider">
             <a class="dropdown-item" @onclick="OnDelete_Click">
                 <i class="fa-solid fa-trash has-text-danger"></i>
                 <span>Delete</span>
             </a>
        </Dropdown>
    </div>

    <div class="box mt-3">
        @if (scriptPackageNode is not null && scriptPackageNode.ExtractJobId is not null)
        {
            <div class="notification is-primary">
                <strong>ScriptPackage in extract scripts process...</strong>
            </div>
        }
        else
        {
            <button type="button" class="button is-success" @onclick="OnUpload_Click">
                <span class="icon is-small">
                    <i class="fa-solid fa-circle-plus"></i>
                </span>
                <span>Upload</span>
            </button>
        }
    </div>
    @if (scriptPackageNode is not null && scriptPackageNode.LastWarnings is not null)
    {
        <div class="notification is-warning" style="white-space: pre-line">
            @scriptPackageNode.LastWarnings
        </div>
    }

    <div class="box mt-3">
        @if (items != null)
        {
            <DirectTable Items="items">
                <Header>
                <tr>
                    <th class="w50px">Type</th>
                    <th>Name</th>
                    <th>Created</th>
                    <th>Updated</th>
                </tr>
                </Header>
                <Body Context="Item">
                <tr class="pointer" @onclick="@(_ => OnItem_Click(Item))">
                    <td class="has-text-centered">
                        <NodeTypeIcon Type="Item.Type" />
                    </td>
                    <td>@Item.Name</td>
                    <td>@Item.CreatedUtc</td>
                    <td>@Item.UpdatedUtc</td>
                </tr>
                </Body>
            </DirectTable>
        }
    </div>
</div>

@code {

    private Runner.Business.Entities.Nodes.Types.ScriptPackage? scriptPackageNode;
    private List<Node>? items;

    protected override async Task OnInitializedAsync()
    {
        scriptPackageNode = await scriptPackageService.ReadByNodeId(Node.NodeId);
        if (scriptPackageNode == null)
        {
            await Notification.AddError("ScriptPackage not found!");
            PageNotFound();
        }
        else
        {
            await OnRefresh_Click();
        }
    }

    public async Task OnRefresh_Click()
    {
        items = await nodeService.ReadChilds(Node.NodeId);
        StateHasChanged();
    }


    public void OnItem_Click(Node node)
    {
        FowardNode(node);
    }

    public async Task OnUpload_Click()
    {
        var response = await Modal.InputFiles(new Components.Modal.Inputs.InputFileRequest
            {
                Title = "Upload Script Package",
                FileLabel = "Zip file content scripts"
            });
        if (response is not null)
        {
            try
            {
                Assert.MustTrue(response.Files.Count == 1, "Only one zip file is allowed!");

                var file = response.Files[0];

                await scriptPackageService.ExtractScripts(Node.NodeId, file.Name, file.Content);
            }
            catch (Exception err)
            {
                await Notification.AddError(err);
                return;
            }
            await OnRefresh_Click();
        }
    }

    private async Task OnDelete_Click()
    {
        if (await Modal.Question(new Components.Modal.Question.QuestionRequest
            {
                Title = "Delete",
                Question = "Confirm delete this node?"
            }) ?? false)
        {
            try
            {
                await scriptPackageService.DeleteByNode(Node);
            }
            catch (Exception err)
            {
                await Notification.AddError(err);
                return;
            }

            NodeBack();
        }
    }

    private async Task OnRename_Click()
    {
        var newName = await Modal.InputText(new Components.Modal.Inputs.InputTextRequest
            {
                Title = "Rename Node",
                Value = Node.Name,
                PlaceHolder = "Node name"
            });

        if (!string.IsNullOrEmpty(newName))
        {
            try
            {
                await nodeService.UpdateName(Node.NodeId, newName);

                Node.Name = newName;
            }
            catch (Exception err)
            {
                await Notification.AddError(err);
                return;
            }
        }
    }
}
