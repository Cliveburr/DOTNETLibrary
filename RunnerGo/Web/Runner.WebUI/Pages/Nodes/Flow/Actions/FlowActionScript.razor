@using Runner.Business.Datas.Object
@using Runner.Business.Datas.Model
@using Runner.Business.Entities.Nodes.Types
@inherits FlowActionView
@inject ClipboardInterop clipboardInterop
@inject ScriptService scriptService

<div class="flowaction" @onclick=OnFlipEditor @onclick:stopPropagation=true @onmouseover:stopPropagation=true>
    <p>@ValidLabel()</p>
</div>

@code {

    protected override void OnInitialized()
    {
        Node.Data = new DataObject(Node.Data)
            .Merge(Business.Actions.DataOfTypes.ScriptDataType.Get())
            .ToDataProperty();
    }

    private void OnRemove_Click()
    {
        if (Parent is not null)
        {
            ClosePanel();
            Parent.RemoveChild(Node);
        }
    }

    private void OnContainer_Click()
    {
        Node.Type = Business.Actions.ActionType.Container;
        ClosePanel();
        UpdateParent();
    }

    private void OnParallel_Click()
    {
        Node.Type = Business.Actions.ActionType.Parallel;
        ClosePanel();
        UpdateParent();
    }

    private void OnMoveUp_Click()
    {
        if (Parent is not null)
        {
            ClosePanel();
            Parent.MoveUp(Node);
        }
    }

    private void OnMoveDown_Click()
    {
        if (Parent is not null)
        {
            ClosePanel();
            Parent.MoveDown(Node);
        }
    }

    private Task OnCopy_Click()
    {
        var text = System.Text.Json.JsonSerializer.Serialize(Node);
        return clipboardInterop.WriteTextAsync(text);
    }

    private Task OnCut_Click()
    {
        var text = System.Text.Json.JsonSerializer.Serialize(Node);
        OnRemove_Click();
        return clipboardInterop.WriteTextAsync(text);
    }

    private async Task OnEditData_Click()
    {
        ClosePanel();

        var dataObject = new DataObject(Business.Actions.DataOfTypes.ScriptDataType.Get())
            .Merge(Node.Data);

        var result = await View.EditData(dataObject);
        if (result is not null)
        {
            Node.Data = result;
        }

        OnOpenEditor();
    }

    protected override RenderFragment EditorForm()
    {
        return
        @<div class="is-flex is-flex-direction-column m-4">
            <h3 class="title is-3">Script</h3>
            <div class="buttons">
                <button type="button" class="button is-info is-small" @onclick="OnMoveUp_Click">
                    <span class="icon is-small">
                        <i class="fa-solid fa-arrow-turn-up"></i>
                    </span>
                </button>
                <button type="button" class="button is-info is-small" @onclick="OnMoveDown_Click">
                    <span class="icon is-small">
                        <i class="fa-solid fa-arrow-turn-down"></i>
                    </span>
                </button>
                <button type="button" class="button is-link is-small" @onclick="OnCopy_Click">
                    <span class="icon is-small">
                        <i class="fa-solid fa-clipboard"></i>
                    </span>
                    <span>Copy</span>
                </button>
                <button type="button" class="button is-danger is-small" @onclick="OnCut_Click">
                    <span class="icon is-small">
                        <i class="fa-solid fa-scissors"></i>
                    </span>
                    <span>Cut</span>
                </button>
            </div>
            <div class="buttons">
                <button type="button" class="button is-primary is-small" @onclick="OnContainer_Click">
                    <span class="icon is-small">
                        <i class="fa-solid fa-box"></i>
                    </span>
                    <span>Container</span>
                </button>
                <button type="button" class="button is-primary is-small" @onclick="OnParallel_Click">
                    <span class="icon is-small">
                        <i class="fa-solid fa-align-justify fa-rotate-90"></i>
                    </span>
                    <span>Parallel</span>
                </button>
                @if (Parent is not null)
                {
                    <button type="button" class="button is-danger is-small" @onclick="OnRemove_Click">
                        <span class="icon is-small">
                            <i class="fa-solid fa-xmark"></i>
                        </span>
                        <span>Remove</span>
                    </button>
                }
            </div>
            <div class="buttons">
                <button type="button" class="button is-primary is-small" @onclick="OnEditData_Click">
                    <span class="icon is-small">
                        <NodeTypeIcon Type=NodeType.Data />
                    </span>
                    <span>Edita Data</span>
                </button>
            </div>
            <div class="field">
                <label class="label">Label</label>
                <div class="control">
                    <input class="input" type="text" @bind=Node.Label placeholder="Label">
                </div>
            </div>
            <DataPropertyListEditor Properties=Node.Data />
        </div>;
    }
}
