@using Runner.Business.Datas.Control
@using Runner.Business.Datas.Validator
@using Runner.Business.Entities.Nodes.Types;
@using Runner.Business.Model.Nodes.Types;
@inject NodeService nodeService
@inject RunService runService
@inherits BasePage
@inject FlowService flowService

<div class="buttons mt-3">
    <button type="button" class="button is-primary" @onclick="NodeBack">
        <span class="icon is-small">
            <i class="fa-solid fa-square-caret-left"></i>
        </span>
    </button>
    <button type="button" class="button is-info" @onclick="OnRefresh_Click">
        <span class="icon is-small">
            <i class="fa-solid fa-rotate-right"></i>
        </span>
        <span>Refresh</span>
    </button>
    <button type="button" class="button is-success" @onclick="OnNew_Click">
        <span class="icon is-small">
            <i class="fa-solid fa-person"></i>
        </span>
        <span>New</span>
    </button>
    <button type="button" class="button is-success" @onclick="OnRun_Click">
        <span class="icon is-small">
            <i class="fa-solid fa-person-running"></i>
        </span>
        <span>Run</span>
    </button>
</div>

<div class="box mt-3">
    <DataTable @ref=table Func=@((request) => runService.ReadRunsTable(request, FlowNode))>
        <Header>
        <tr>
            <th class="w50px">Type</th>
            <th>RunId</th>
            <th>Status</th>
            <th>Created</th>
            <th>Completed</th>
        </tr>
        </Header>
        <Body Context="Item">
        <tr class="pointer" @onclick="@(_ => OnNavigateApp_Click(Item))">
            <td class="has-text-centered">
                <NodeTypeIcon Type="NodeType.Run" />
            </td>
            <td>@Item.RunId</td>
            <td>@Item.Status</td>
            <td>@Item.Created</td>
            <td>@Item.Completed</td>
        </tr>
        </Body>
    </DataTable>
</div>

@code {

    [Parameter]
    public required Flow FlowNode { get; set; }

    private DataTable<RunList>? table;

    public async Task OnRefresh_Click()
    {
        try
        {
            if (table is not null)
            {
                await table.Refresh();
            }
        }
        catch (Exception err)
        {
            await Notification.AddError(err);
        }
    }

    public Task OnNew_Click()
    {
        return CreateNewRun(false);
    }

    public Task OnRun_Click()
    {
        return CreateNewRun(true);
    }

    public async Task CreateNewRun(bool setToRun)
    {
        try
        {
            if (FlowNode.Input is not null)
            {
                var dataMerge = new DataMerge()
                    .ApplyDataTypeProperty(FlowNode.Input);

                var dataProperties = await Modal.DataFullEditor(dataMerge.ToDataFullProperty());
                if (dataProperties is not null)
                {
                    dataMerge
                        .ApplyDataProperty(dataProperties);
                    var validation = dataMerge.Validate();
                    if (validation.Any())
                    {
                        foreach (var validate in validation)
                        {
                            await Notification.AddInfo(validate.Text);
                        }
                    }
                    else
                    {
                        await runService.CreateRun(FlowNode, dataProperties, setToRun);
                        await OnRefresh_Click();
                    }
                }
            }
            else
            {
                await runService.CreateRun(FlowNode, null, setToRun);
                await OnRefresh_Click();
            }
        }
        catch (Exception err)
        {
            await Notification.AddError(err);
        }
    }

    public void OnNavigateApp_Click(RunList node)
    {
        FowardNode(node.RunId.ToString());
    }
}
