@using Business.Entities.Nodes.Types;
@using Runner.Business.Entities;
@using Runner.WebUI.Pages.Nodes.Flow.Actions;
@inherits BasePage
@inject FlowService flowService

<div class="buttons mt-3">
    <button type="button" class="button is-primary" @onclick="View.BackToView">
        <span class="icon is-small">
            <i class="fa-solid fa-square-caret-left"></i>
        </span>
    </button>
    <button type="button" class="button is-success" @onclick="OnSave_Click">
        <span class="icon is-small">
            <i class="fa-solid fa-floppy-disk"></i>
        </span>
        <span>Save</span>
    </button>
    <button type="button" class="button is-info" @onclick="OnInput_Click">
        <span class="icon is-small">
            <i class="fa-solid fa-superscript"></i>
        </span>
        <span>Input</span>
    </button>
    <button type="button" class="button is-danger" @onclick="OnDelete_Click">
        <span class="icon is-small">
            <i class="fa-solid fa-trash"></i>
        </span>
        <span>Delete</span>
    </button>
</div>

<div class="flowactionedit">
    <FlowActionSelector Node="View.FlowNode!.Root" UpdateParent=UpdateState />
</div>

@code {

    [CascadingParameter(Name = "View")]
    public required FlowView View { get; set; }

    private async Task OnSave_Click()
    {
        if (View.FlowNode is null)
        {
            return;
        }

        try
        {
            await flowService.Update(View.FlowNode);
        }
        catch (Exception ex)
        {
            await Notification.AddError(ex);
        }

        View.BackToView();
    }

    public void UpdateState()
    {
        StateHasChanged();
    }

    private async Task OnDelete_Click()
    {
        if (View.FlowNode is null)
        {
            return;
        }

        if (await Modal.Question(new Components.Modal.Question.QuestionRequest
            {
                Title = "Delete",
                Question = "Confirm delete this node?"
            }) ?? false)
        {
            try
            {
                await flowService.Delete(View.FlowNode);

                NodeBack();
            }
            catch (Exception ex)
            {
                await Notification.AddError(ex);
            }
        }
    }

    private async Task OnInput_Click()
    {
        if (View.FlowNode is null)
        {
            return;
        }

        var result = await View.EditData(View.FlowNode.Input);
        if (result is not null)
        {
            View.FlowNode.Input = result;
        }
    }
}
