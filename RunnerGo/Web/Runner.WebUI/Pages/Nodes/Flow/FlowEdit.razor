@using Business.Entities.Nodes.Types;
@using Runner.Business.Entities;
@using Runner.WebUI.Components.FlowEditor;
@inherits BasePage
@inject FlowService flowService

<div class="buttons mt-3">
    <button type="button" class="button is-primary" @onclick="NodeBack">
        <span class="icon is-small">
            <i class="fa-solid fa-square-caret-left"></i>
        </span>
    </button>
    <button type="button" class="button is-success" @onclick="OnSave_Click">
        <span class="icon is-small">
            <i class="fa-solid fa-floppy-disk"></i>
        </span>
        <span>Save</span>
    </button>
    <button type="button" class="button is-danger" @onclick="OnDelete_Click">
        <span class="icon is-small">
            <i class="fa-solid fa-trash"></i>
        </span>
        <span>Delete</span>
    </button>
</div>

<div class="flowactionedit">
    <CascadingValue Name="GetPanel" TValue="Func<RightPanel>" Value="new Func<RightPanel?>(() => Panel)">
        <FlowActionSelector Node="FlowNode.Root" UpdateParent=UpdateState />
    </CascadingValue>
</div>

@code {

    [Parameter]
    public required Flow FlowNode { get; set; }

    [Parameter]
    public RightPanel? Panel { get; set; }

    private async Task OnSave_Click()
    {
        await flowService.Update(FlowNode);
        NodeBack();
    }

    public void UpdateState()
    {
        StateHasChanged();
    }

    private async Task OnDelete_Click()
    {
        if (await Modal.Question(new Components.Modal.Question.QuestionRequest
            {
                Title = "Delete",
                Question = "Confirm delete this node?"
            }) ?? false)
        {
            try
            {
                await flowService.Delete(FlowNode);
            }
            catch (Exception err)
            {
                await Notification.AddError(err);
                return;
            }

            NodeBack();
        }
    }
}
