@using Business.Entities.Nodes.Types;
@using Runner.Business.Datas.Model
@using Runner.Business.Datas.Object
@using Runner.WebUI.Pages.Nodes.Flow.Actions
@inherits NodeBasePage
@inject FlowService flowService
@inject DataExpandService dataExpandService

<div class="container">

    <div class="box mt-4">
        <h3 class="title is-3">Flow: @Node.Name <NodeTypeIcon Type="NodeType.Flow" /></h3>
    </div>

    <CascadingValue Name="View" Value="this">
        <div class=@HiddenFlows()>
            @switch (state)
            {
                case 0:
                    <FlowRuns />
                    break;
                case 1:
                    <FlowEdit />
                    break;
                case 2:
                    <FlowSchedule />
                    break;
            }
        </div>
        @if (showData is not null)
        {
            <FlowEditData showData=showData />
        }
    </CascadingValue>
</div>

<RightPanel @ref=Panel />

@code {

    public Flow? FlowNode { get; set; }
    public RightPanel? Panel { get; set; }

    private int tabId;
    private int state;

    private DataObject? showData;
    //private int? showStateBack;
    private ManualResetEvent? showDataResume;
    private List<DataProperty>? showDataResult;

    protected override async Task OnInitializedAsync()
    {
        FlowNode = await flowService.ReadByNodeId(Node.NodeId);
    }

    private string HiddenFlows()
    {
        return showData is null ? "" : "hidden";
    }

    public void BackToView()
    {
        state = 0;
        Panel?.Close();
        StateHasChanged();
    }

    public void EditView()
    {
        state = 1;
    }

    public void EditSchedule()
    {
        state = 2;
    }

    private string GetTabActive(int id)
    {
        return id == tabId ? "is-active" : "";
    }

    private void OnTabClick(int id)
    {
        if (id != tabId)
        {
            tabId = id;
            if (Panel is not null)
            {
                Panel.Close(); 
            }
        }
    }

    public Task<List<DataProperty>?> EditData(List<DataProperty>? data)
    {
        return EditData(new DataObject(data));
    }

    public Task<List<DataProperty>?> EditData(DataObject data)
    {
        if (Panel is not null)
        {
            Panel.Close();
        }

        data.Service = dataExpandService;

        showDataResume = new ManualResetEvent(false);
        showData = data;
        showDataResult = null;
        //showStateBack = state;
        //state = 3;
        StateHasChanged();

        return Task.Run(() =>
        {
            showDataResume.WaitOne();

            return showDataResult;
        });
    }

    public void EditDataAccept()
    {
        showDataResult = showData?.ToDataProperty();
        showDataResume?.Set();
        showDataResume = null;
        showData = null;

        //state = showStateBack ?? 0;
        //showStateBack = null;
    }

    public void EditDataCancel()
    {
        showDataResult = null;
        showDataResume?.Set();
        showDataResume = null;
        showData = null;
        
        //state = showStateBack ?? 0;
        //showStateBack = null;
    }
}
