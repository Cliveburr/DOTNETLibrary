@using Runner.Business.Entities.Job
@inherits NodeBasePage
@inject AgentService agentService
@inject JobService jobService

@if (agentNode != null)
{
    <div class="container">

        <div class="box mt-4">
            <h3 class="title is-3">Agent: @agentNode.MachineName <NodeTypeIcon Type="NodeType.Agent" /></h3>
        </div>

        <div class="is-flex is-justify-content-space-between">
            <div class="is-flex is-gap">
                <button type="button" class="button is-primary" @onclick="NodeBack">
                    <span class="icon is-small">
                        <i class="fa-solid fa-square-caret-left"></i>
                    </span>
                </button>
                <button type="button" class="button is-info" @onclick="OnRefresh_Click">
                    <span class="icon is-small">
                        <i class="fa-solid fa-rotate-right"></i>
                    </span>
                    <span>Refresh</span>
                </button>
                <button type="button" class="button is-primary" @onclick="OnUpdate_Click">
                    <span class="icon is-small">
                        <i class="fa-solid fa-wrench"></i>
                    </span>
                    <span>Update</span>
                </button>
            </div>
            <Dropdown IsRight Icon="fa-solid fa-ellipsis">
                 <a class="dropdown-item" @onclick=FavoriteThisNode>
                     <i class="fa-solid fa-star"></i>
                     <span>Favorite</span>
                 </a>
                 <a class="dropdown-item" @onclick=CopyPathToClipboard>
                     <i class="fa-brands fa-stackpath"></i>
                     <span>Node Path</span>
                 </a>
                 <hr class="dropdown-divider">
                 <a class="dropdown-item" @onclick="OnDelete_Click">
                     <i class="fa-solid fa-trash has-text-danger"></i>
                     <span>Delete</span>
                 </a>
            </Dropdown>
        </div>

        <div class="box mt-3">
            <DataTable @ref=table Func=@((request) => jobService.ReadForAgent(request, agentNode.AgentId))>
                <Header>
                    <tr>
                        <th>Queued</th>
                        <th>Status</th>
                        <th>Started</th>
                        <th>End</th>
                    </tr>
                </Header>
                <Body Context="Item">
                    <tr>
                        <td>@Item.Queued</td>
                        <td>@Item.Status</td>
                        <td>@Item.Started</td>
                        <td>@Item.End</td>
                    </tr>
                </Body>
            </DataTable>
        </div>
    </div>
}

@code {

    private Runner.Business.Entities.Nodes.Types.Agent? agentNode;
    private DataTable<Job>? table;

    protected override async Task OnInitializedAsync()
    {
        agentNode = await agentService.ReadByNodeId(Node.NodeId);
        if (agentNode == null)
        {
            await Notification.AddError("Agent not found!");
            PageNotFound();
        }
        // else
        // {
        //     await OnRefresh_Click();
        // }
    }

    public async Task OnRefresh_Click()
    {
        try
        {
            if (table is not null)
            {
                await table.Refresh();
            }
        }
        catch (Exception err)
        {
            await Notification.AddError(err);
        }
    }

    public async Task OnUpdate_Click()
    {
        try
        {
            Assert.MustNotNull(agentNode, "Internal error!");

            await jobService.QueueAgentUpdate(agentNode.AgentId);

            await OnRefresh_Click();
        }
        catch (Exception err)
        {
            await Notification.AddError(err);
        }
    }

    private async Task OnDelete_Click()
    {
        if (await Modal.Question(new Components.Modal.Question.QuestionRequest
            {
                Title = "Delete",
                Question = "Confirm delete this node?"
            }) ?? false)
        {
            try
            {
                await agentService.DeleteByNode(Node);
            }
            catch (Exception err)
            {
                await Notification.AddError(err);
                return;
            }

            NodeBack();
        }
    }
}
