@page "/jobs"
@inherits BasePage
@inject JobService jobService

<div class="container">

    <div class="box mt-4">
        <h3 class="title is-3">Jobs <i class="fa-solid fa-user-doctor" style="color: #8a3c9d"></i></h3>
    </div>

    <div class="buttons mt-3">
        <button type="button" class="button is-primary" @onclick="HistoryBack">
            <span class="icon is-small">
                <i class="fa-solid fa-square-caret-left"></i>
            </span>
        </button>
        <button type="button" class="button is-info" @onclick="OnRefresh_Click">
            <span class="icon is-small">
                <i class="fa-solid fa-rotate-right"></i>
            </span>
            <span>Refresh</span>
        </button>
    </div>

    <div class="box mt-3">
        @if (items != null)
        {
            <DataTable Items="items">
                <Header>
                <tr>
                    <th class="w50px">Type</th>
                    <th>Queued</th>
                    <th>Status</th>
                    <th>Started</th>
                    <th>End</th>
                </tr>
                </Header>
                <Body Context="Item">
                <tr>
                    <td>@Item.Type</td>
                    <td>@Item.Queued</td>
                    <td>@Item.Status</td>
                    <td>@Item.Started</td>
                    <td>@Item.End</td>
                </tr>
                </Body>
            </DataTable>
        }
    </div>
</div>


@code {

    private List<Runner.Business.Entities.Job.Job>? items;

    protected override async Task OnInitializedAsync()
    {
        await OnRefresh_Click();
    }

    public async Task OnRefresh_Click()
    {
        try
        {
            items = await jobService.Read();
        }
        catch (Exception err)
        {
            await Notification.AddError(err);
            return;
        }
    }
}
