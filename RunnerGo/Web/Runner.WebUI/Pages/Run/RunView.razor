@using Runner.Business.Entities;
@using Runner.Business.Entities.Nodes.Types;
@using Runner.Business.WatcherNotification;
@using Runner.Business.Datas.Model;
@using Runner.Business.Datas.Object;
@inherits BasePage
@implements IDisposable;
@inject NodeService nodeService
@inject RunService runService
@inject IAgentWatcherNotification agentWatcherNotification
@inject DataExpandService dataExpandService

<div class="container">

    <div class="box mt-4">
        <h3 class="title is-3">Run <NodeTypeIcon Type="NodeType.Run" /></h3>
    </div>

    <div class="buttons mt-3">
        <button type="button" class="button is-primary" @onclick="NodeBack">
            <span class="icon is-small">
                <i class="fa-solid fa-square-caret-left"></i>
            </span>
        </button>
        <button type="button" class="button is-info" @onclick="OnRefresh_Click">
            <span class="icon is-small">
                <i class="fa-solid fa-rotate-right"></i>
            </span>
            <span>Refresh</span>
        </button>
        <button type="button" class="button is-danger" @onclick="OnDelete_Click">
            <span class="icon is-small">
                <i class="fa-solid fa-trash"></i>
            </span>
            <span>Delete</span>
        </button>
    </div>

    <CascadingValue Name="RunView" Value="this">
        @if (showData is null)
        {
            <div class="actionview">
                @if (ThisRun is not null)
                {
                    <Runner.WebUI.Pages.Run.Actions.RunViewSelector Action="GetRootAction()" />
                }
            </div>
        }
        else
        {
            <div class="buttons mt-3">
                <button type="button" class="button is-primary" @onclick="OnShowDataCancel_Click">
                    <span class="icon is-small">
                        <i class="fa-solid fa-trash"></i>
                    </span>
                    <span>Cancel</span>
                </button>
                <button type="button" class="button is-success" @onclick="OnShowDataAccept_Click">
                    <span class="icon is-small">
                        <i class="fa-solid fa-floppy-disk"></i>
                    </span>
                    <span>Accept</span>
                </button>
                <button type="button" class="button is-warning" @onclick="OnValidate_Click">
                    <span class="icon is-small">
                        <i class="fa-solid fa-list-check"></i>
                    </span>
                    <span>Validate</span>
                </button>
                <button type="button" class="button is-primary" @onclick="OnView_Click">
                    <span class="icon is-small">
                        <i class="fa-solid fa-scroll"></i>
                    </span>
                    <span>View</span>
                </button>
            </div>

            <div class="box mt-3">
                <DatasEditor Value=showData />
            </div>
        }
    </CascadingValue>

</div>

<RightPanel @ref=Panel />

<div class="@GetRunLogViewClass()">
    <div class="textarea is-link" placeholder="Log">
        @if (logs is not null)
        @foreach (var log in logs)
        {
            if (string.IsNullOrEmpty(log.FullError))
            {
                <span>@($"{log.Created.ToString("dd/MM/yyyy HH:mm:ss")} - {log.Text}")</span>
                <br />
            }
            else
            {
                <div>
                    <span>@($"{log.Created.ToString("dd/MM/yyyy HH:mm:ss")} - ")</span>
                    <span class="tag is-danger pointer" @onclick="@(() => ShowError(log))">Error</span>
                    <span>@($" {log.Text}")</span>
                </div>
            }
        }
    </div>
</div>

@code {

    [Parameter]
    public required string RunIdStr { get; set; }

    public Runner.Business.Entities.Nodes.Types.Run? ThisRun { get; private set; }
    public RightPanel? Panel { get; private set; }
    private List<Runner.Business.Entities.Nodes.Types.RunLog>? logs;
    private int logSkip = 0;

    private DataObject? showData;
    private ManualResetEvent? showDataResume;
    private List<DataProperty>? showDataResult;

    protected override async Task OnInitializedAsync()
    {
        agentWatcherNotification.OnRunUpdated += WatcherNotification_OnRunUpdated;

        await OnRefresh_Click();
    }

    public void Dispose()
    {
        agentWatcherNotification.OnRunUpdated -= WatcherNotification_OnRunUpdated;
    }

    private void WatcherNotification_OnRunUpdated(Run newRun)
    {
        _ = InvokeAsync(() =>
        {
            SetRun(newRun);
            StateHasChanged();
        });
    }

    private async Task OnRefresh_Click()
    {
        try
        {
            var gotRun = await runService.ReadByIdStr(RunIdStr);
            Assert.MustNotNull(gotRun, "Run not found!");
            SetRun(gotRun);
        }
        catch (Exception ex)
        {
            await Notification.AddError(ex);
            PageNotFound();

        }
    }

    private void SetRun(Runner.Business.Entities.Nodes.Types.Run run)
    {
        logs = run.Log
            .OrderByDescending(l => l.Created)
            .Skip(logSkip)
            .Take(100)
            .ToList();
        ThisRun = run;
    }

    private string GetRunLogViewClass()
    {
        return showData is null ?
            "runlogview"
            : "runlogview hidden";
    }

    private Runner.Business.Actions.Action GetRootAction()
    {
        Assert.MustNotNull(ThisRun, "Internal - ThisRun null!");
        return ThisRun.Actions
            .First(a => a.ActionId == ThisRun.RootActionId);
    }

    public Task StopAction(Runner.Business.Actions.Action action)
    {
        Assert.MustNotNull(ThisRun, "Internal - ThisRun null!");
        return runService.Stop(ThisRun.RunId, action.ActionId);
    }

    public Task RunAction(Runner.Business.Actions.Action action)
    {
        Assert.MustNotNull(ThisRun, "Internal - ThisRun null!");
        return runService.SetRun(ThisRun.RunId, action.ActionId);
    }

    public Task SetBreakPoint(Runner.Business.Actions.Action action)
    {
        Assert.MustNotNull(ThisRun, "Internal - ThisRun null!");
        return runService.SetBreakPoint(ThisRun.RunId, action.ActionId);
    }

    public Task CleanBreakPoint(Runner.Business.Actions.Action action)
    {
        Assert.MustNotNull(ThisRun, "Internal - ThisRun null!");
        return runService.CleanBreakPoint(ThisRun.RunId, action.ActionId);
    }

    public Task UpdateActionData(Runner.Business.Actions.Action action)
    {
        Assert.MustNotNull(ThisRun, "Internal - ThisRun null!");
        return runService.UpdateActionData(ThisRun.RunId, action);
    }

    private async Task OnDelete_Click()
    {
        Assert.MustNotNull(ThisRun, "Internal - ThisRun null!");
        if (await Modal.Question(new Components.Modal.Question.QuestionRequest
            {
                Title = "Delete",
                Question = "Confirm delete this run?"
            }) ?? false)
        {
            try
            {
                await runService.Delete(ThisRun.RunId);
            }
            catch (Exception err)
            {
                await Notification.AddError(err);
                return;
            }

            NodeBack();
        }
    }

    private Task ShowError(Runner.Business.Entities.Nodes.Types.RunLog log)
    {
        return Modal.ShowError(log.Text, log.FullError!);
    }

    public Task<List<DataProperty>?> EditData(List<DataProperty>? data)
    {
        return EditData(new DataObject(data));
    }

    public Task<List<DataProperty>?> EditData(DataObject data)
    {
        if (Panel is not null)
        {
            Panel.Close();
        }

        data.Service = dataExpandService;

        showDataResume = new ManualResetEvent(false);
        showData = data;
        showDataResult = null;
        StateHasChanged();

        return Task.Run(() =>
        {
            showDataResume.WaitOne();

            return showDataResult;
        });
    }

    private void OnShowDataAccept_Click()
    {
        showDataResult = showData?.ToDataProperty();
        showDataResume?.Set();
        showDataResume = null;
        showData = null;
    }

    private void OnShowDataCancel_Click()
    {
        showDataResult = null;
        showDataResume?.Set();
        showDataResume = null;
        showData = null;
    }

    private async Task OnValidate_Click()
    {
        try
        {
            if (showData is null)
            {
                return;
            }

            await showData.Resolve(false);

            var errors = showData.Validate();
            if (errors.Any())
            {
                foreach (var error in errors)
                {
                    await Notification.AddWarning(error.Text, 10);
                }
                return;
            }
        }
        catch (Exception err)
        {
            await Notification.AddError(err);
        }
    }

    private async Task OnView_Click()
    {
        try
        {
            if (showData is null)
            {
                return;
            }

            await showData.Resolve();
            await Modal.ShowData(showData);
        }
        catch (Exception err)
        {
            await Notification.AddError(err);
        }
    }
}
