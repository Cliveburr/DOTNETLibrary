@page "/apps"
@inherits BasePage
@using Runner.Business.Entities.Nodes.Types
@inject AppService appService

<div class="container">

    <div class="box mt-4">
        <h3 class="title is-3">Applications <NodeTypeIcon Type="NodeType.App" /></h3>
    </div>

    <div class="buttons mt-3">
        <button type="button" class="button is-primary" @onclick="HistoryBack">
            <span class="icon is-small">
                <i class="fa-solid fa-square-caret-left"></i>
            </span>
        </button>
        <button type="button" class="button is-info" @onclick="OnRefresh_Click">
            <span class="icon is-small">
                <i class="fa-solid fa-rotate-right"></i>
            </span>
            <span>Refresh</span>
        </button>
        <button type="button" class="button is-success" @onclick="OnCreate_Click">
            <span class="icon is-small">
                <i class="fa-solid fa-circle-plus"></i>
            </span>
            <span>Create</span>
        </button>
    </div>

    <div class="box mt-3">
        <DataTable Func=appService.ReadTable>
            <Header>
                <tr>
                    <th class="w50px">Type</th>
                    <th>Name</th>
                    <th>Created</th>
                    <th>Updated</th>
                </tr>
            </Header>
            <Body Context="Item">
                <tr class="pointer" @onclick="@(_ => OnItem_Click(Item))">
                    <td class="has-text-centered">
                        <NodeTypeIcon Type="NodeType.App" />
                    </td>
                    <td>@Item.Name</td>
                    <td>@Item.CreatedUtc</td>
                    <td>@Item.UpdatedUtc</td>
                </tr>
            </Body>
        </DataTable>
    </div>
</div>


@code {

    private DataTable<Node>? table;

    public async Task OnRefresh_Click()
    {
        try
        {
            if (table is not null)
            {
                await table.Refresh();
            }
        }
        catch (Exception err)
        {
            await Notification.AddError(err);
        }
    }

    public async Task OnCreate_Click()
    {
        var response = await Modal.InputText(new Components.Modal.Inputs.InputTextRequest
        {
            Title = "Enter the name of the app",
            Value = "",
            PlaceHolder = "app"
        });
        if (!string.IsNullOrEmpty(response))
        {
            try
            {
                await appService.Create(response);
            }
            catch (Exception err)
            {
                await Notification.AddError(err);
                return;
            }
            await OnRefresh_Click();
        }
    }

    public void OnItem_Click(Node node)
    {
        NavigateTo("/app/" + node.Name);
    }
}
