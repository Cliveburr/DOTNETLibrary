@using Runner.Business.Entities;
@using Runner.Business.Entities.Node;
@inject NodeService nodeService
@inject BaseService baseService

<div class="container">

    <div class="box mt-4">
        <h3 class="title is-3">Agent Pool: @Node.Name <NodeTypeIcon Type="Node.Type" /></h3>
    </div>

    <div class="buttons mt-3">
        <button type="button" class="button is-primary" @onclick="baseService.BackNode">
            <span class="icon is-small">
                <i class="fa-solid fa-square-caret-left"></i>
            </span>
        </button>
        <button type="button" class="button is-info" @onclick="OnRefresh_Click">
            <span class="icon is-small">
                <i class="fa-solid fa-rotate-right"></i>
            </span>
            <span>Refresh</span>
        </button>
        <button type="button" class="button is-danger" @onclick="OnDelete_Click">
            <span class="icon is-small">
                <i class="fa-solid fa-trash"></i>
            </span>
            <span>Delete</span>
        </button>
    </div>

    <div class="box mt-3">
        @if (Items != null)
        {
            <DataTable Items="Items">
                <Header>
                    <tr>
                        <th class="w50px">Type</th>
                        <th>Name</th>
                        <th>Status</th>
                        <th>HeartBeat</th>
                        <th>LastExecuted</th>
                    </tr>
                </Header>
                <Body Context="Item">
                    <tr class="pointer" @onclick="@(_ => OnNavigateAgentPool_Click(Item))">
                        <td class="has-text-centered">
                            <NodeTypeIcon Type="Item.Type" />
                        </td>
                        <td>@Item.MachineName</td>
                        <td>@Item.Status</td>
                        <td>@Item.HeartBeat</td>
                        <td>@Item.LastExecuted</td>
                    </tr>
                </Body>
            </DataTable>
        }
    </div>
</div>

@code {

    [Parameter]
    public required Node Node { get; set; }

    public List<Business.Entities.Node.Agent.Agent>? Items { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await OnRefresh_Click();
    }

    public async Task OnRefresh_Click()
    {
        Items = await nodeService.ReadChilds<Business.Entities.Node.Agent.Agent>(Node);
        StateHasChanged();
    }

    public void OnNavigateAgentPool_Click(Node node)
    {
        baseService.FowardNode(node.Name);
    }

    private async Task OnDelete_Click()
    {
        if (await baseService.Modal.Confirm("Delete", "Confirm delete this node?"))
        {
            await nodeService.Delete(Node);
            baseService.BackNode();
        }
    }
}
