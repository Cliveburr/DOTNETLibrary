@using Runner.Business.Entities;
@using Runner.WebUI.Components.FlowEditor;
@inject NodeService nodeService
@inject BaseService baseService

<div class="buttons mt-3">
    <button type="button" class="button is-primary" @onclick="baseService.BackNode">
        <span class="icon is-small">
            <i class="fa-solid fa-square-caret-left"></i>
        </span>
    </button>
    <button type="button" class="button is-success" @onclick="OnSave_Click">
        <span class="icon is-small">
            <i class="fa-solid fa-floppy-disk"></i>
        </span>
        <span>Save</span>
    </button>
    <button type="button" class="button is-danger" @onclick="OnDelete_Click">
        <span class="icon is-small">
            <i class="fa-solid fa-trash"></i>
        </span>
        <span>Delete</span>
    </button>
</div>

<div class="flowactionedit">
    <CascadingValue Name="GetPanel" TValue="Func<RightPanel>" Value="new Func<RightPanel?>(() => Panel)">
        <FlowActionSelector Node="FlowNode.Root" />
    </CascadingValue>
</div>

@code {

    [Parameter]
    public required Business.Entities.Node.Flow FlowNode { get; set; }

    [Parameter]
    public RightPanel? Panel { get; set; }

    private async Task OnSave_Click()
    {
        await nodeService.UpdateFlow(FlowNode);
        baseService.Reload();
    }

    public void UpdateState()
    {
        StateHasChanged();
    }

    private async Task OnDelete_Click()
    {
        if (await baseService.Modal.Confirm("Delete", "Confirm delete this node?"))
        {
            await nodeService.Delete(FlowNode);
            baseService.BackNode();
        }
    }
}
