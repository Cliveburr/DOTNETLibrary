@* <div class="flowactionbase">
    <div class="flowactioncontainer" @onclick=OnOpenEditor>
        <div class="flowlabel">
            <p>@ValidLabel()</p>
            <button class="button is-small" @onclick=OnOpenEditor>
                <span class="icon is-small">
                    <i class="fa-solid fa-bars"></i>
                </span>
            </button>
        </div>
        @if (Node.Actions != null)
        @foreach (var action in Node.Actions)
        {
            <FlowAction Node="action" Parent=this />
        }
    </div>
    <div class="flowactioncontainers">
        @if (Node.Next != null)
        @foreach (var next in Node.Next)
        {
            <FlowActionContainer Node="next" Parent=this />
        }
    </div>
</div>
@* 
@code {

    [Parameter]
    public required Runner.Business.Entities.Flow Node { get; set; }

    [Parameter]
    public FlowActionContainer? Parent { get; set; }

    [CascadingParameter(Name = "GetPanel")]
    public Func<RightPanel?>? GetPanel { get; set; }

    private string ValidLabel()
    {
        return string.IsNullOrEmpty(Node.Label) ?
            " " :
            Node.Label;
    }

    public void UpdateState()
    {
        StateHasChanged();
    }

    private void OnOpenEditor()
    {
        if (GetPanel != null)
        {
            var panel = GetPanel();
            if (panel != null)
            {
                panel.SetOpen(EditorForm());
            }
        }
    }

    private void OnAddAction_Click()
    {
        if (Node.Actions == null)
        {
            Node.Actions = new List<Business.Entities.FlowAction>();
        }
        Node.Actions.Add(new Business.Entities.FlowAction
        {
            Label = "New Action"
        });
    }

    private void OnAddNextContainer_Click()
    {
        if (Node.Next == null)
        {
            Node.Next = new List<Business.Entities.FlowActionContainer>();
        }
        Node.Next.Add(new Business.Entities.FlowActionContainer
        {
            Label = "New Container"
        });
    }

    private void OnRemoveContainer_Click()
    {
        if (Parent?.Node.Next != null)
        {
            Parent.Node.Next.Remove(Node);
            Parent.UpdateState();
            if (GetPanel != null)
            {
                var panel = GetPanel();
                if (panel != null)
                {
                    panel.CleanPanel();
                }
            }
        }
    }

    private RenderFragment EditorForm()
    {
        return
        @<div class="is-flex is-flex-direction-column m-4">
            <h3 class="title is-3">Container</h3>
            <div class="buttons">
                <button type="button" class="button is-primary is-small" @onclick="OnAddAction_Click">
                    <span class="icon is-small">
                        <i class="fa-solid fa-circle-plus"></i>
                    </span>
                    <span>Add Action</span>
                </button>
                <button type="button" class="button is-primary is-small" @onclick="OnAddNextContainer_Click">
                    <span class="icon is-small">
                        <i class="fa-solid fa-circle-plus"></i>
                    </span>
                    <span>Add Container</span>
                </button>
                @if (Parent != null)
                {
                    <button type="button" class="button is-danger is-small" @onclick="OnRemoveContainer_Click">
                        <span class="icon is-small">
                        <i class="fa-solid fa-xmark"></i>
                        </span>
                        <span>Remove</span>
                    </button>
                }
            </div>
            <div class="field">
                <label class="label">Label</label>
                <div class="control">
                    <input class="input" type="text" @bind=Node.Label placeholder="Label">
                </div>
            </div>
            <div class="field">
                <label class="label">Agent Pool</label>
                <div class="control">
                    <input class="input" type="text" @bind=Node.AgentPool placeholder="Agent Pool">
                </div>
            </div>
            <div class="field">
                <label class="label">Tags</label>
                <div class="control">
                    <input class="input" type="text" placeholder="Tags">
                </div>
            </div>
        </div>;
    }
}
 *@